import asyncio
import logging
from aiohttp import web, ClientSession
import os
from datetime import datetime
import pytz
import config
from main_bot import HybridSportsBot

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è Railway
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO,
    handlers=[
        logging.StreamHandler()  # –¢–æ–ª—å–∫–æ –∫–æ–Ω—Å–æ–ª—å–Ω—ã–π –≤—ã–≤–æ–¥ –¥–ª—è Railway
    ]
)
logger = logging.getLogger(__name__)

class WebServer:
    """HTTP —Å–µ—Ä–≤–µ—Ä –¥–ª—è Railway"""
    
    def __init__(self, bot_instance):
        self.bot = bot_instance
        self.app = web.Application()
        self.setup_routes()
    
    def setup_routes(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–∞—Ä—à—Ä—É—Ç–æ–≤"""
        self.app.router.add_get('/', self.health_check)
        self.app.router.add_get('/health', self.health_check)
        self.app.router.add_get('/status', self.bot_status)
        self.app.router.add_post('/test', self.test_predictions)
    
    async def health_check(self, request):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–∞"""
        return web.json_response({
            'status': 'ok',
            'service': 'Sports Prediction Bot',
            'timestamp': datetime.now(pytz.timezone('Europe/Moscow')).isoformat(),
            'version': '2.0.0'
        })
    
    async def bot_status(self, request):
        """–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Telegram
            me = await self.bot.bot.get_me()
            return web.json_response({
                'bot_status': 'active',
                'bot_username': me.username,
                'bot_name': me.first_name,
                'scheduler_running': self.bot.scheduler.running if hasattr(self.bot.scheduler, 'running') else True,
                'jobs_count': len(self.bot.scheduler.get_jobs()) if hasattr(self.bot.scheduler, 'get_jobs') else 0,
                'perplexity_enabled': self.bot.use_perplexity if hasattr(self.bot, 'use_perplexity') else False
            })
        except Exception as e:
            logger.error(f"Bot status error: {e}")
            return web.json_response({
                'bot_status': 'error',
                'error': str(e)
            }, status=500)
    
    async def test_predictions(self, request):
        """–†—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø—Ä–æ–≥–Ω–æ–∑–æ–≤"""
        try:
            await self.bot.test_send()
            return web.json_response({
                'status': 'success',
                'message': 'Test predictions sent successfully'
            })
        except Exception as e:
            return web.json_response({
                'status': 'error',
                'message': str(e)
            }, status=500)
    
    async def start_server(self, host='0.0.0.0', port=None):
        """–ó–∞–ø—É—Å–∫ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞"""
        if port is None:
            port = int(os.environ.get('PORT', 8000))
        
        runner = web.AppRunner(self.app)
        await runner.setup()
        
        site = web.TCPSite(runner, host, port)
        await site.start()
        
        logger.info(f"üåê HTTP —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ {host}:{port}")
        return runner

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è Railway"""
    BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
    CHANNEL_ID = os.getenv('TELEGRAM_CHANNEL_ID')
    PERPLEXITY_KEY = os.getenv('PERPLEXITY_API_KEY')
    
    if not BOT_TOKEN or not CHANNEL_ID:
        logger.error("‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
        logger.error("TELEGRAM_BOT_TOKEN –∏ TELEGRAM_CHANNEL_ID –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã")
        return
    
    if not PERPLEXITY_KEY:
        logger.warning("‚ö†Ô∏è PERPLEXITY_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        logger.warning("–ë–æ—Ç –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ")
    
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ Sports Prediction Bot –¥–ª—è Railway...")
    logger.info(f"üî¨ Perplexity API: {'‚úÖ –ê–∫—Ç–∏–≤–µ–Ω' if PERPLEXITY_KEY else '‚ùå –û—Ç–∫–ª—é—á–µ–Ω'}")
    
    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
    bot = HybridSportsBot(BOT_TOKEN, CHANNEL_ID, PERPLEXITY_KEY)
    
    # –°–æ–∑–¥–∞–µ–º –≤–µ–±-—Å–µ—Ä–≤–µ—Ä
    web_server = WebServer(bot)
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –±–æ—Ç–∞
        await bot.start_scheduler()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º HTTP —Å–µ—Ä–≤–µ—Ä
        runner = await web_server.start_server()
        
        logger.info("‚úÖ –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã –∑–∞–ø—É—â–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        logger.info("üìä –ë–æ—Ç –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –ø—Ä–æ–≥–Ω–æ–∑—ã –≤ 9:05 –∏ 15:00 –ú–°–ö")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        try:
            await bot.test_send()
            logger.info("üì§ –°—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
        
        # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª
        while True:
            await asyncio.sleep(60)
            
    except Exception as e:
        logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        raise
    finally:
        await bot.cleanup()
        if 'runner' in locals():
            await runner.cleanup()

if __name__ == "__main__":
    asyncio.run(main())
