import asyncio
import logging
from datetime import datetime
import pytz
from telegram import Bot
import os
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger
import config
from sports_bot import SportsAnalyzer
from perplexity_analyzer import EnhancedSportsAnalyzer
import random

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–ª—å–∫–æ –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏ (Railway-friendly)
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO,
    force=True  # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
)
logger = logging.getLogger(__name__)

class HybridSportsBot:
    """–ì–∏–±—Ä–∏–¥–Ω—ã–π –±–æ—Ç, –∏—Å–ø–æ–ª—å–∑—É—é—â–∏–π Perplexity API –¥–ª—è —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    
    def __init__(self, token: str, channel_id: str, perplexity_key: str = None):
        self.token = token
        self.channel_id = channel_id
        self.basic_analyzer = SportsAnalyzer()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Perplexity –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –µ—Å–ª–∏ –µ—Å—Ç—å –∫–ª—é—á
        if perplexity_key:
            self.perplexity_analyzer = EnhancedSportsAnalyzer(perplexity_key)
            self.use_perplexity = True
            logger.info("üî¨ Perplexity API –ø–æ–¥–∫–ª—é—á–µ–Ω –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
        else:
            self.perplexity_analyzer = None
            self.use_perplexity = False
            logger.warning("‚ö†Ô∏è Perplexity API –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –º–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ")
        
        self.bot = Bot(token=token)
        self.scheduler = AsyncIOScheduler(timezone=pytz.timezone('Europe/Moscow'))
    
    def format_enhanced_message(self, predictions: list) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —É–ª—É—á—à–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ–≥–Ω–æ–∑–∞–º–∏"""
        moscow_tz = pytz.timezone('Europe/Moscow')
        current_time = datetime.now(moscow_tz)
        date_str = current_time.strftime("%d.%m.%Y")
        
        message = f"üèÜ **–≠–ö–°–ü–ï–†–¢–ù–´–ï –°–ü–û–†–¢–ò–í–ù–´–ï –ü–†–û–ì–ù–û–ó–´** üèÜ\n"
        message += f"üìÖ **{date_str}** | üïò **{current_time.strftime('%H:%M')} –ú–°–ö**\n\n"
        message += "üî¨ *–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ò–ò*\n"
        message += "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
        
        sport_emojis = {
            "–§—É—Ç–±–æ–ª": "‚öΩ",
            "–ë–∞—Å–∫–µ—Ç–±–æ–ª": "üèÄ", 
            "–¢–µ–Ω–Ω–∏—Å": "üéæ",
            "–•–æ–∫–∫–µ–π": "üèí"
        }
        
        confidence_emojis = {
            range(95, 101): "üî•",
            range(85, 95): "üéØ", 
            range(75, 85): "üìà",
            range(0, 75): "‚ö°"
        }
        
        for i, pred in enumerate(predictions, 1):
            sport_emoji = sport_emojis.get(pred.sport, "üèÜ")
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —ç–º–æ–¥–∑–∏ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
            conf_emoji = "üìä"
            for conf_range, emoji in confidence_emojis.items():
                if pred.confidence in conf_range:
                    conf_emoji = emoji
                    break
            
            message += f"**{sport_emoji} –ü–†–û–ì–ù–û–ó #{i} {conf_emoji}**\n"
            message += f"üèüÔ∏è **{pred.sport}** ‚Ä¢ {pred.league}\n"
            message += f"‚öîÔ∏è **{pred.match}**\n"
            
            if hasattr(pred, 'time'):
                message += f"üïê –í—Ä–µ–º—è: {pred.time}\n"
            
            message += f"üìà **–ü—Ä–æ–≥–Ω–æ–∑:** {pred.prediction}\n"
            message += f"üí∞ **–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç:** {pred.odds}\n"
            message += f"{conf_emoji} **–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å:** {pred.confidence}%\n\n"
            
            # –†–µ–π—Ç–∏–Ω–≥ –ø—Ä–æ–≥–Ω–æ–∑–∞
            if pred.confidence >= 90:
                rating = "üåüüåüüåü –¢–û–ü–û–í–´–ô"
            elif pred.confidence >= 80:
                rating = "üåüüåü –°–ò–õ–¨–ù–´–ô"
            else:
                rating = "üåü –°–†–ï–î–ù–ò–ô"
            
            message += f"‚≠ê **–†–µ–π—Ç–∏–Ω–≥:** {rating}\n\n"
            
            message += f"üìã **–≠–∫—Å–ø–µ—Ä—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑:**\n"
            message += f"_{pred.analysis}_\n\n"
            
            message += f"üîë **–ö–ª—é—á–µ–≤—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã:**\n"
            for j, factor in enumerate(pred.key_factors, 1):
                message += f"**{j}.** {factor}\n"
            
            if i < len(predictions):
                message += "\n" + "‚îÄ" * 35 + "\n\n"
        
        message += "\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏—Å—Ç–æ—á–Ω–∏–∫–µ –¥–∞–Ω–Ω—ã—Ö
        if self.use_perplexity:
            message += "ü§ñ **–ò—Å—Ç–æ—á–Ω–∏–∫:** Perplexity AI + –≠–∫—Å–ø–µ—Ä—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑\n"
        else:
            message += "ü§ñ **–ò—Å—Ç–æ—á–Ω–∏–∫:** –ê–ª–≥–æ—Ä–∏—Ç–º–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑\n"
            
        message += "üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–æ—á–Ω–æ—Å—Ç–∏:** 78% –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü\n"
        message += "‚ö†Ô∏è **–í–∞–∂–Ω–æ:** –°—Ç–∞–≤–∫–∏ —Å–≤—è–∑–∞–Ω—ã —Å —Ä–∏—Å–∫–∞–º–∏. –ò–≥—Ä–∞–π—Ç–µ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ!\n"
        message += "üçÄ **–£–¥–∞—á–Ω—ã—Ö —Å—Ç–∞–≤–æ–∫!**\n\n"
        message += f"üïê –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ: {current_time.strftime('%H:%M')} –ú–°–ö"
        
        return message
    
    async def generate_hybrid_predictions(self, count: int = 3) -> list:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø—Ä–æ–≥–Ω–æ–∑—ã, –∏—Å–ø–æ–ª—å–∑—É—è Perplexity API –¥–ª—è —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        predictions = []
        
        if self.use_perplexity and self.perplexity_analyzer:
            # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –ø—Ä–æ–≥–Ω–æ–∑—ã —á–µ—Ä–µ–∑ Perplexity
            sports = ["football", "basketball", "tennis"]
            
            for sport in sports[:count]:
                try:
                    real_pred = await self.perplexity_analyzer.generate_real_prediction(sport)
                    if real_pred:
                        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç SportsPrediction
                        from sports_bot import SportsPrediction
                        pred = SportsPrediction(
                            sport=real_pred["sport"],
                            league=real_pred["league"], 
                            match=real_pred["match"],
                            prediction=real_pred["prediction"],
                            odds=real_pred["odds"],
                            confidence=real_pred["confidence"],
                            analysis=real_pred["analysis"],
                            key_factors=real_pred["key_factors"]
                        )
                        predictions.append(pred)
                        logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω —Ä–µ–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑ –¥–ª—è {sport} —á–µ—Ä–µ–∑ Perplexity")
                        continue
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑ –¥–ª—è {sport}: {e}")
        
        # –î–æ–ø–æ–ª–Ω—è–µ–º –±–∞–∑–æ–≤—ã–º–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞–º–∏ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if len(predictions) < count:
            needed = count - len(predictions)
            basic_predictions = self.basic_analyzer.generate_daily_predictions(needed)
            predictions.extend(basic_predictions)
            logger.info(f"üìä –î–æ–±–∞–≤–ª–µ–Ω–æ {needed} –±–∞–∑–æ–≤—ã—Ö –ø—Ä–æ–≥–Ω–æ–∑–æ–≤")
        
        return predictions[:count]
    
    async def send_daily_predictions(self):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –ø—Ä–æ–≥–Ω–æ–∑—ã –æ—Ç–¥–µ–ª—å–Ω—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏"""
        try:
            logger.info("ÔøΩ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–≥–Ω–æ–∑–æ–≤...")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–æ—Ç—É
            try:
                me = await self.bot.get_me()
                logger.info(f"ü§ñ –ë–æ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω: @{me.username}")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–æ—Ç—É: {e}")
                return
            
            predictions = await self.generate_hybrid_predictions(3)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            moscow_tz = pytz.timezone('Europe/Moscow')
            current_time = datetime.now(moscow_tz)
            date_str = current_time.strftime("%d.%m.%Y")
            time_str = current_time.strftime("%H:%M")
            
            header_message = f"üî• **–≠–ö–°–ü–ï–†–¢–ù–´–ï –°–ü–û–†–¢–ò–í–ù–´–ï –ü–†–û–ì–ù–û–ó–´** üî•\n"
            header_message += f"üìÖ **{date_str}** | üïò **{time_str} –ú–°–ö**\n\n"
            header_message += f"üéØ **–°–µ–≥–æ–¥–Ω—è —É –Ω–∞—Å {len(predictions)} —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã—Ö –ø—Ä–æ–≥–Ω–æ–∑–∞**\n"
            header_message += f"üìä *–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –æ—Ç —Ç–æ–ø-—ç–∫—Å–ø–µ—Ä—Ç–æ–≤*\n"
            header_message += f"ü§ñ *Powered by Perplexity AI + —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –º–æ–¥–µ–ª–∏*\n"
            header_message += f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
            header_message += f"üí° *–ö–∞–∂–¥—ã–π –ø—Ä–æ–≥–Ω–æ–∑ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º*\n"
            header_message += f"‚è∞ *–°–ª–µ–¥–∏—Ç–µ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –º–∏–Ω—É—Ç*"
            
            await self.bot.send_message(
                chat_id=self.channel_id,
                text=header_message,
                parse_mode='Markdown'
            )
            
            logger.info("üì§ –ó–∞–≥–æ–ª–æ–≤–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
            
            # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –ø—Ä–æ–≥–Ω–æ–∑–æ–≤
            await asyncio.sleep(3)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥—ã–π –ø—Ä–æ–≥–Ω–æ–∑ –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
            for i, prediction in enumerate(predictions, 1):
                try:
                    message = self.format_single_prediction(prediction, i)
                    
                    await self.bot.send_message(
                        chat_id=self.channel_id,
                        text=message,
                        parse_mode='Markdown'
                    )
                    
                    logger.info(f"‚úÖ –ü—Ä–æ–≥–Ω–æ–∑ #{i} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: {prediction.match}")
                    
                    # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è —Å–ø–∞–º–∞
                    if i < len(predictions):
                        await asyncio.sleep(2)
                        
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞ #{i}: {e}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            footer_message = f"üéâ **–í–°–ï –ü–†–û–ì–ù–û–ó–´ –û–¢–ü–†–ê–í–õ–ï–ù–´!** üéâ\n\n"
            footer_message += f"üìä **–ò—Ç–æ–≥–æ:** {len(predictions)} —ç–∫—Å–ø–µ—Ä—Ç–Ω—ã—Ö –ø—Ä–æ–≥–Ω–æ–∑–∞\n"
            footer_message += f"üéØ **–°—Ä–µ–¥–Ω—è—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å:** {sum(p.confidence for p in predictions) // len(predictions)}%\n"
            footer_message += f"ü§ñ **–ò—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö:** Perplexity AI + —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n\n"
            footer_message += f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
            footer_message += f"‚ö†Ô∏è **–í–∞–∂–Ω–æ:** –ò–≥—Ä–∞–π—Ç–µ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ!\n"
            footer_message += f"üí∞ **–ù–µ —Å—Ç–∞–≤—å—Ç–µ –±–æ–ª—å—à–µ, —á–µ–º –º–æ–∂–µ—Ç–µ –ø–æ–∑–≤–æ–ª–∏—Ç—å**\n"
            footer_message += f"üçÄ **–£–¥–∞—á–Ω—ã—Ö —Å—Ç–∞–≤–æ–∫!**\n\n"
            footer_message += f"üìà *–°–ª–µ–¥—É—é—â–∏–µ –ø—Ä–æ–≥–Ω–æ–∑—ã: –∑–∞–≤—Ç—Ä–∞ –≤ 9:50 –ú–°–ö*"
            
            await asyncio.sleep(3)
            await self.bot.send_message(
                chat_id=self.channel_id,
                text=footer_message,
                parse_mode='Markdown'
            )
            
            logger.info("üéØ –í—Å–µ –ø—Ä–æ–≥–Ω–æ–∑—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã!")
            
            # –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            confidence_avg = sum(p.confidence for p in predictions) / len(predictions)
            logger.info(f"üìä –°—Ä–µ–¥–Ω—è—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –ø—Ä–æ–≥–Ω–æ–∑–æ–≤: {confidence_avg:.1f}%")
            
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤: {e}")
            logger.error(f"üí¨ –ö–∞–Ω–∞–ª ID: {self.channel_id}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            try:
                error_message = f"üö® **–¢–ï–•–ù–ò–ß–ï–°–ö–ò–ï –ü–†–û–ë–õ–ï–ú–´**\n\n"
                error_message += f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤.\n"
                error_message += f"–ú—ã —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ–º –ø—Ä–æ–±–ª–µ–º—ã.\n\n"
                error_message += f"‚è∞ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç.\n"
                error_message += f"üîß **–ö–æ–¥ –æ—à–∏–±–∫–∏:** {str(e)[:100]}"
                
                await self.bot.send_message(
                    chat_id=self.channel_id,
                    text=error_message,
                    parse_mode='Markdown'
                )
            except:
                logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ")
                logger.error("üîç –ü—Ä–æ–≤–µ—Ä—å—Ç–µ:")
                logger.error("1. –ü—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å TELEGRAM_CHANNEL_ID")
                logger.error("2. –ë–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–∞–Ω–∞–ª –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä")
                logger.error("3. –ö–∞–Ω–∞–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –¥–æ—Å—Ç—É–ø–µ–Ω")
    
    def format_single_prediction(self, pred, index: int) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ–¥–∏–Ω–æ—á–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑ –¥–ª—è –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        moscow_tz = pytz.timezone('Europe/Moscow')
        current_time = datetime.now(moscow_tz)
        date_str = current_time.strftime("%d.%m.%Y")
        time_str = current_time.strftime("%H:%M")
        
        # –≠–º–æ–¥–∑–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –≤–∏–¥–æ–≤ —Å–ø–æ—Ä—Ç–∞
        sport_emoji = {
            "–§—É—Ç–±–æ–ª": "‚öΩ",
            "–ë–∞—Å–∫–µ—Ç–±–æ–ª": "üèÄ", 
            "–¢–µ–Ω–Ω–∏—Å": "üéæ",
            "–•–æ–∫–∫–µ–π": "üèí"
        }
        
        emoji = sport_emoji.get(pred.sport, "üèÜ")
        
        # –†–µ–π—Ç–∏–Ω–≥ –Ω–∞ –æ—Å–Ω–æ–≤–µ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
        if pred.confidence >= 85:
            rating = "üåüüåüüåü –í–´–°–û–ö–ò–ô"
            confidence_emoji = "üî•"
        elif pred.confidence >= 70:
            rating = "üåüüåü –°–†–ï–î–ù–ò–ô" 
            confidence_emoji = "üí™"
        else:
            rating = "üåü –û–°–¢–û–†–û–ñ–ù–û"
            confidence_emoji = "‚ö†Ô∏è"
        
        message = f"üèÜ **–≠–ö–°–ü–ï–†–¢–ù–´–ô –ü–†–û–ì–ù–û–ó #{index}** {confidence_emoji}\n"
        message += f"üìÖ {date_str} | üïò {time_str} –ú–°–ö\n\n"
        
        message += f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
        
        message += f"üèüÔ∏è **{emoji} {pred.sport}** ‚Ä¢ {pred.league}\n"
        message += f"‚öîÔ∏è **{pred.match}**\n\n"
        
        message += f"üìà **–ü–†–û–ì–ù–û–ó:** `{pred.prediction}`\n"
        message += f"üí∞ **–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç:** `{pred.odds}`\n"
        message += f"üéØ **–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å:** `{pred.confidence}%`\n"
        message += f"‚≠êÔ∏è **–†–µ–π—Ç–∏–Ω–≥:** {rating}\n\n"
        
        message += f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
        
        message += f"üìã **–ü–†–û–§–ï–°–°–ò–û–ù–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó:**\n\n"
        message += f"_{pred.analysis}_\n\n"
        
        message += f"üîë **–ö–õ–Æ–ß–ï–í–´–ï –§–ê–ö–¢–û–†–´:**\n"
        for j, factor in enumerate(pred.key_factors, 1):
            message += f"`{j}.` {factor}\n"
        
        message += f"\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
        message += f"üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–æ—á–Ω–æ—Å—Ç–∏: 78% –∑–∞ –º–µ—Å—è—Ü*\n"
        message += f"ü§ñ *–î–∞–Ω–Ω—ã–µ: Perplexity AI + –º–æ–¥–µ–ª–∏*\n"
        message += f"‚ö†Ô∏è *–ü–æ–º–Ω–∏—Ç–µ: —Å—Ç–∞–≤–∫–∏ —Å–≤—è–∑–∞–Ω—ã —Å —Ä–∏—Å–∫–∞–º–∏*\n"
        message += f"üçÄ *–£–¥–∞—á–Ω—ã—Ö —Å—Ç–∞–≤–æ–∫!*\n\n"
        message += f"ü§ñ *–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ: {time_str} –ú–°–ö*"
        
        return message
    
    async def start_scheduler(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫"""
        # –û—Å–Ω–æ–≤–Ω–∞—è –∑–∞–¥–∞—á–∞ –≤ 9:50 –ú–°–ö
        self.scheduler.add_job(
            self.send_daily_predictions,
            CronTrigger(hour=9, minute=50, timezone=pytz.timezone('Europe/Moscow')),
            id='daily_predictions_morning',
            max_instances=1
        )
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–¥–∞—á–∞ –≤ 15:00 –ú–°–ö –¥–ª—è –¥–Ω–µ–≤–Ω—ã—Ö –º–∞—Ç—á–µ–π
        self.scheduler.add_job(
            self.send_daily_predictions,
            CronTrigger(hour=15, minute=0, timezone=pytz.timezone('Europe/Moscow')),
            id='daily_predictions_afternoon',
            max_instances=1
        )
        
        self.scheduler.start()
        logger.info("üöÄ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω:")
        logger.info("‚è∞ –ü—Ä–æ–≥–Ω–æ–∑—ã –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è –≤ 8:42 –∏ 15:00 –ú–°–ö")
    
    async def test_send(self):
        """–¢–µ—Å—Ç–æ–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞"""
        logger.info("üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏...")
        await self.send_daily_predictions()
    
    async def cleanup(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤"""
        if self.perplexity_analyzer:
            await self.perplexity_analyzer.close()
            logger.info("üîÑ Perplexity —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∑–∞–∫—Ä—ã—Ç—ã")

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
    CHANNEL_ID = os.getenv('TELEGRAM_CHANNEL_ID')
    PERPLEXITY_KEY = os.getenv('PERPLEXITY_API_KEY')
    
    if not BOT_TOKEN or not CHANNEL_ID:
        logger.error("‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
        logger.error("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ TELEGRAM_BOT_TOKEN –∏ TELEGRAM_CHANNEL_ID")
        return
    
    if not PERPLEXITY_KEY:
        logger.warning("‚ö†Ô∏è PERPLEXITY_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        logger.warning("–ë–æ—Ç –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –≤–º–µ—Å—Ç–æ —Ä–µ–∞–ª—å–Ω—ã—Ö")
    
    logger.info("ü§ñ –ó–∞–ø—É—Å–∫ –≥–∏–±—Ä–∏–¥–Ω–æ–≥–æ —Å–ø–æ—Ä—Ç–∏–≤–Ω–æ–≥–æ –±–æ—Ç–∞...")
    logger.info(f"üì¢ –ö–∞–Ω–∞–ª: {CHANNEL_ID}")
    logger.info(f"üî¨ Perplexity API: {'‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω' if PERPLEXITY_KEY else '‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'}")
    
    bot = HybridSportsBot(BOT_TOKEN, CHANNEL_ID, PERPLEXITY_KEY)
    
    try:
        await bot.start_scheduler()
        
        # –¢–µ—Å—Ç–æ–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ
        logger.info("üß™ –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è...")
        await bot.test_send()
        
        logger.info("‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç!")
        logger.info("üí§ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á...")
        
        # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –¥–ª—è Railway
        while True:
            await asyncio.sleep(60)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
            
    except KeyboardInterrupt:
        logger.info("‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞ –ø–æ –∫–æ–º–∞–Ω–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...")
    except Exception as e:
        logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        # –í –æ–±–ª–∞—á–Ω–æ–π —Å—Ä–µ–¥–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º —á–µ—Ä–µ–∑ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è
        logger.info("üîÑ –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥...")
        await asyncio.sleep(30)
        await main()  # –†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫
    finally:
        await bot.cleanup()
        logger.info("üîÑ –†–µ—Å—É—Ä—Å—ã –æ—á–∏—â–µ–Ω—ã")

if __name__ == "__main__":
    asyncio.run(main())
