#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –∫–∞—á–µ—Å—Ç–≤–∞ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ –ø–æ—Å–ª–µ —É–ª—É—á—à–µ–Ω–∏–π
"""
import asyncio
import os
from sports_bot import EnhancedSportsBot

async def test_mock_predictions():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∫–∞—á–µ—Å—Ç–≤–æ –º–æ–∫–æ–≤—ã—Ö –ø—Ä–æ–≥–Ω–æ–∑–æ–≤"""
    print("üß™ –¢–ï–°–¢ –ö–ê–ß–ï–°–¢–í–ê –ú–û–ö–û–í–´–• –î–ê–ù–ù–´–•")
    print("=" * 50)
    
    bot = EnhancedSportsBot("fake_token", "fake_channel")
    
    print("üìä –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º 3 –ø—Ä–æ–≥–Ω–æ–∑–∞...")
    
    for i in range(3):
        prediction = bot.generate_prediction()
        print(f"\nüèÜ –ü–†–û–ì–ù–û–ó #{i+1}:")
        print(f"   üéØ –°–ø–æ—Ä—Ç: {prediction.sport}")
        print(f"   üèüÔ∏è –õ–∏–≥–∞: {prediction.league}")
        print(f"   ‚öîÔ∏è –ú–∞—Ç—á: {prediction.match}")
        print(f"   üïê –í—Ä–µ–º—è: {prediction.time}")
        print(f"   üìà –ü—Ä–æ–≥–Ω–æ–∑: {prediction.prediction}")
        print(f"   üí∞ –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç: {prediction.odds}")
        print(f"   üéØ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {prediction.confidence}%")
        print(f"   üìä –ò—Å—Ç–æ—á–Ω–∏–∫: {prediction.source}")
        print(f"   üìã –ê–Ω–∞–ª–∏–∑: {prediction.analysis[:100]}...")
    
    print(f"\n‚úÖ –ú–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –≥–æ—Ç–æ–≤—ã!")
    return True

async def main():
    """–û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ—Å—Ç –∫–∞—á–µ—Å—Ç–≤–∞"""
    print("üéØ –ë–´–°–¢–†–´–ô –¢–ï–°–¢ –ö–ê–ß–ï–°–¢–í–ê –ü–û–°–õ–ï –£–õ–£–ß–®–ï–ù–ò–ô")
    print("=" * 60)
    
    success = await test_mock_predictions()
    
    if success:
        print("\nüéâ –¢–ï–°–¢ –ü–†–û–ô–î–ï–ù! –ö–∞—á–µ—Å—Ç–≤–æ —É–ª—É—á—à–∏–ª–æ—Å—å")
        print("üî• –†–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã, –≤—Ä–µ–º–µ–Ω–∞ –º–∞—Ç—á–µ–π, –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑")
    else:
        print("\n‚ö†Ô∏è –ï–°–¢–¨ –ü–†–û–ë–õ–ï–ú–´")

if __name__ == "__main__":
    asyncio.run(main())
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∫–∞—á–µ—Å—Ç–≤–æ –º–æ–∫–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ö–ê–ß–ï–°–¢–í–ê –ü–†–û–ì–ù–û–ó–û–í")
    print("=" * 50)
    
    analyzer = SportsAnalyzer()
    
    print("üìä –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø—Ä–æ–≥–Ω–æ–∑–æ–≤...")
    
    sports = ["–§—É—Ç–±–æ–ª", "–ë–∞—Å–∫–µ—Ç–±–æ–ª", "–¢–µ–Ω–Ω–∏—Å", "–•–æ–∫–∫–µ–π"]
    
    for sport in sports:
        print(f"\nüèÜ {sport.upper()}:")
        print("-" * 30)
        
        prediction = await analyzer.generate_prediction(sport)
        
        print(f"‚öîÔ∏è –ú–∞—Ç—á: {prediction.match}")
        print(f"üèüÔ∏è –õ–∏–≥–∞: {prediction.league}")
        
        if hasattr(prediction, 'time'):
            print(f"üïê –í—Ä–µ–º—è: {prediction.time}")
        
        print(f"üìà –ü—Ä–æ–≥–Ω–æ–∑: {prediction.prediction}")
        print(f"üí∞ –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç: {prediction.odds}")
        print(f"üéØ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {prediction.confidence}%")
        
        if hasattr(prediction, 'source'):
            print(f"üì° –ò—Å—Ç–æ—á–Ω–∏–∫: {prediction.source}")
        
        print(f"\nüìã –ê–Ω–∞–ª–∏–∑:")
        print(f"{prediction.analysis[:150]}...")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞
        quality_score = 0
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥—ã –≤—ã–≥–ª—è–¥—è—Ç —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ
        if any(team in prediction.match for team in ["–ë–∞—Ä—Å–µ–ª–æ–Ω–∞", "–†–µ–∞–ª", "–ú–∞–Ω—á–µ—Å—Ç–µ—Ä", "–õ–∏–≤–µ—Ä–ø—É–ª—å", "–õ–µ–π–∫–µ—Ä—Å", "–ì–æ–ª–¥–µ–Ω –°—Ç—ç–π—Ç"]):
            quality_score += 1
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ª–∏–≥–∏
        if prediction.league and len(prediction.league) > 5:
            quality_score += 1
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–µ—Ç–∞–ª—å–Ω–æ—Å—Ç—å –∞–Ω–∞–ª–∏–∑–∞
        if len(prediction.analysis) > 100:
            quality_score += 1
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã
        try:
            odds_val = float(prediction.odds)
            if 1.1 <= odds_val <= 10.0:
                quality_score += 1
        except:
            pass
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
        if 70 <= prediction.confidence <= 95:
            quality_score += 1
            
        quality_percent = (quality_score / 5) * 100
        
        if quality_percent >= 80:
            quality_emoji = "‚úÖ"
            quality_text = "–û–¢–õ–ò–ß–ù–û–ï"
        elif quality_percent >= 60:
            quality_emoji = "‚ö†Ô∏è"
            quality_text = "–•–û–†–û–®–ï–ï"
        else:
            quality_emoji = "‚ùå"
            quality_text = "–ü–õ–û–•–û–ï"
            
        print(f"\n{quality_emoji} –ö–∞—á–µ—Å—Ç–≤–æ: {quality_text} ({quality_percent:.0f}%)")

async def test_realistic_teams():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ—Å—Ç—å –∫–æ–º–∞–Ω–¥"""
    print("\n\nüèüÔ∏è –ü–†–û–í–ï–†–ö–ê –†–ï–ê–õ–ò–°–¢–ò–ß–ù–û–°–¢–ò –ö–û–ú–ê–ù–î")
    print("=" * 50)
    
    analyzer = SportsAnalyzer()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º 10 –º–∞—Ç—á–µ–π –ø–æ —Ñ—É—Ç–±–æ–ª—É
    football_teams = set()
    
    for i in range(10):
        pred = await analyzer.generate_prediction("–§—É—Ç–±–æ–ª")
        teams = pred.match.replace(" - ", " vs ").split(" vs ")
        for team in teams:
            football_teams.add(team.strip())
    
    print(f"üèà –ù–∞–π–¥–µ–Ω–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ñ—É—Ç–±–æ–ª—å–Ω—ã—Ö –∫–æ–º–∞–Ω–¥: {len(football_teams)}")
    
    real_teams = [
        "–ë–∞—Ä—Å–µ–ª–æ–Ω–∞", "–†–µ–∞–ª –ú–∞–¥—Ä–∏–¥", "–ú–∞–Ω—á–µ—Å—Ç–µ—Ä –°–∏—Ç–∏", "–õ–∏–≤–µ—Ä–ø—É–ª—å", 
        "–ß–µ–ª—Å–∏", "–ê—Ä—Å–µ–Ω–∞–ª", "–ü–°–ñ", "–ë–∞–≤–∞—Ä–∏—è", "–Æ–≤–µ–Ω—Ç—É—Å", "–ú–∏–ª–∞–Ω"
    ]
    
    real_found = sum(1 for team in real_teams if any(real_team in team for real_team in football_teams))
    
    print(f"‚úÖ –†–µ–∞–ª—å–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –Ω–∞–π–¥–µ–Ω–æ: {real_found}/{len(real_teams)}")
    
    if real_found >= 5:
        print("üéâ –ö–æ–º–∞–Ω–¥—ã –≤—ã–≥–ª—è–¥—è—Ç —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ!")
    else:
        print("‚ö†Ô∏è –ù—É–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å –±–∞–∑—É –∫–æ–º–∞–Ω–¥")

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    await test_mock_data_quality()
    await test_realistic_teams()
    
    print("\n\nüèÅ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û")
    print("üí° –ï—Å–ª–∏ –∫–∞—á–µ—Å—Ç–≤–æ –ø–ª–æ—Ö–æ–µ, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ:")
    print("1. –ë–∞–∑–∞ –∫–æ–º–∞–Ω–¥ –≤ sports_bot.py")
    print("2. –®–∞–±–ª–æ–Ω—ã –∞–Ω–∞–ª–∏–∑–∞")
    print("3. –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤")
    
    print("\nüìù –î–ª—è —É–ª—É—á—à–µ–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–∞:")
    print("1. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ PERPLEXITY_API_KEY –¥–ª—è —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
    print("2. –ò–ª–∏ —É–ª—É—á—à–∏—Ç–µ –º–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ sports_bot.py")

if __name__ == "__main__":
    asyncio.run(main())
