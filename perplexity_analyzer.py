import asyncio
import aiohttp
import json
import logging
from typing import List, Dict, Optional
from datetime import datetime, timedelta
import pytz
import os

logger = logging.getLogger(__name__)

class PerplexityAPI:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Perplexity API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∞–ª—å–Ω—ã—Ö —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    
    def __init__(self, api_key: str):
        self.api_key = api_key
        self.base_url = "https://api.perplexity.ai/chat/completions"
        self.session = None
    
    async def get_session(self):
        """–ü–æ–ª—É—á–∞–µ—Ç aiohttp —Å–µ—Å—Å–∏—é"""
        if not self.session:
            timeout = aiohttp.ClientTimeout(total=30)  # 30 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç
            self.session = aiohttp.ClientSession(
                headers={
                    "Authorization": f"Bearer {self.api_key}",
                    "Content-Type": "application/json",
                    "Accept": "application/json"
                },
                timeout=timeout
            )
        return self.session
    
    async def close_session(self):
        """–ó–∞–∫—Ä—ã–≤–∞–µ—Ç aiohttp —Å–µ—Å—Å–∏—é"""
        if self.session:
            await self.session.close()
            self.session = None
    
    async def search_sports_data(self, query: str, model: str = "sonar-pro") -> Optional[Dict]:
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–∏—Å–∫ —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ Perplexity"""
        try:
            session = await self.get_session()
            
            payload = {
                "model": model,
                "messages": [
                    {
                        "role": "user",
                        "content": query
                    }
                ],
                "max_tokens": 1000,
                "temperature": 0.3,
                "top_p": 0.9
            }
            
            logger.info(f"üîç –ó–∞–ø—Ä–æ—Å –∫ Perplexity API: {query[:100]}...")
            
            async with session.post(self.base_url, json=payload) as response:
                if response.status == 200:
                    data = await response.json()
                    logger.info("‚úÖ Perplexity API –æ—Ç–≤–µ—Ç–∏–ª —É—Å–ø–µ—à–Ω–æ")
                    return data
                else:
                    logger.error(f"‚ùå Perplexity API error: {response.status}")
                    error_text = await response.text()
                    logger.error(f"üìù Error details: {error_text}")
                    return None
                    
        except asyncio.TimeoutError:
            logger.error("‚è∞ Perplexity API timeout")
            return None
        except Exception as e:
            logger.error(f"üí• Error calling Perplexity API: {e}")
            return None
    
    async def get_todays_matches(self, sport: str = "football") -> List[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç –º–∞—Ç—á–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ –≤–∏–¥–∞ —Å–ø–æ—Ä—Ç–∞"""
        moscow_tz = pytz.timezone('Europe/Moscow')
        today = datetime.now(moscow_tz).strftime("%Y-%m-%d")
        
        sport_queries = {
            "football": f"""
            –ù–∞–π–¥–∏ –¢–û–ü-3 —Å–∞–º—ã—Ö –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö —Ñ—É—Ç–±–æ–ª—å–Ω—ã—Ö –º–∞—Ç—á–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è {today} –∏–∑ –≤–µ–¥—É—â–∏—Ö –µ–≤—Ä–æ–ø–µ–π—Å–∫–∏—Ö –ª–∏–≥ (–ü—Ä–µ–º—å–µ—Ä-–ª–∏–≥–∞, –õ–∞ –õ–∏–≥–∞, –°–µ—Ä–∏—è –ê, –ë—É–Ω–¥–µ—Å–ª–∏–≥–∞, –õ–∏–≥–∞ –ß–µ–º–ø–∏–æ–Ω–æ–≤).
            
            –î–ª—è –∫–∞–∂–¥–æ–≥–æ –º–∞—Ç—á–∞ –¥–∞–π –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–û –î–ï–¢–ê–õ–¨–ù–´–ô –ü–†–û–§–ï–°–°–ò–û–ù–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ (–º–∏–Ω–∏–º—É–º 200-300 —Å–ª–æ–≤):
            
            1. –ü–û–õ–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ú–ê–¢–ß–ï:
               - –¢–æ—á–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥ –∏ —Ç—É—Ä–Ω–∏—Ä
               - –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –ø–æ –ú–°–ö
               - –°—Ç–∞–¥–∏–æ–Ω –∏ –µ–≥–æ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏
               - –°—É–¥—å—è –º–∞—Ç—á–∞ (–µ—Å–ª–∏ –∏–∑–≤–µ—Å—Ç–Ω–æ)
            
            2. –ì–õ–£–ë–û–ö–ò–ô –ê–ù–ê–õ–ò–ó –¢–ï–ö–£–©–ï–ô –§–û–†–ú–´ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 7-10 –º–∞—Ç—á–µ–π):
               - –î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫–∞–∂–¥–æ–π –∫–æ–º–∞–Ω–¥—ã
               - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≥–æ–ª–æ–≤ –∑–∞/–ø—Ä–æ—Ç–∏–≤ –≤ –∫–∞–∂–¥–æ–º –º–∞—Ç—á–µ
               - –ö–∞—á–µ—Å—Ç–≤–æ –∏–≥—Ä—ã –ø—Ä–æ—Ç–∏–≤ —Å–∏–ª—å–Ω—ã—Ö/—Å–ª–∞–±—ã—Ö —Å–æ–ø–µ—Ä–Ω–∏–∫–æ–≤
               - –î–∏–Ω–∞–º–∏–∫–∞ —É–ª—É—á—à–µ–Ω–∏—è/—É—Ö—É–¥—à–µ–Ω–∏—è
            
            3. –ò–°–ß–ï–†–ü–´–í–ê–Æ–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –õ–ò–ß–ù–´–• –í–°–¢–†–ï–ß:
               - –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –º–∞—Ç—á–µ–π –º–µ–∂–¥—É –∫–æ–º–∞–Ω–¥–∞–º–∏
               - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–∞ –¥–æ–º–∞—à–Ω–µ–º –ø–æ–ª–µ —Ö–æ–∑—è–µ–≤
               - –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –∏–≥—Ä—ã –∏–º–µ–Ω–Ω–æ –≤ —ç—Ç–æ–º –ø—Ä–æ—Ç–∏–≤–æ—Å—Ç–æ—è–Ω–∏–∏
               - –ö—Ç–æ –¥–æ–º–∏–Ω–∏—Ä–æ–≤–∞–ª –≤ —Ä–∞–∑–Ω—ã–µ –ø–µ—Ä–∏–æ–¥—ã
            
            4. –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –°–û–°–¢–ê–í–û–í:
               - –ö–ª—é—á–µ–≤—ã–µ –∏–≥—Ä–æ–∫–∏ –∏ –∏—Ö —Ç–µ–∫—É—â–∞—è —Ñ–æ—Ä–º–∞
               - –¢—Ä–∞–≤–º—ã, –¥–∏—Å–∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏–∏, —Å–æ–º–Ω–∏—Ç–µ–ª—å–Ω—ã–µ
               - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ª—É—á—à–∏—Ö –±–æ–º–±–∞—Ä–¥–∏—Ä–æ–≤
               - –ì–æ–ª–∫–∏–ø–µ—Ä—ã –∏ –∏—Ö –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç—å
               - –ù–æ–≤—ã–µ —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä—ã –∏ –∏—Ö –≤–ª–∏—è–Ω–∏–µ
            
            5. –¢–ê–ö–¢–ò–ß–ï–°–ö–ò–ô –†–ê–ó–ë–û–†:
               - –ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º—ã–µ —Å—Ö–µ–º—ã –∫–∞–∂–¥–æ–π –∫–æ–º–∞–Ω–¥—ã
               - –ö–∞–∫ –∫–æ–º–∞–Ω–¥—ã –∏–≥—Ä–∞—é—Ç –ø—Ä–æ—Ç–∏–≤ –ø–æ–¥–æ–±–Ω—ã—Ö —Å–æ–ø–µ—Ä–Ω–∏–∫–æ–≤
               - –°–ª–∞–±—ã–µ –º–µ—Å—Ç–∞ –≤ –æ–±–æ—Ä–æ–Ω–µ/–∞—Ç–∞–∫–µ
               - –°–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã –∏ –∫–∞–∫ –∏—Ö –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å
               - –û–∂–∏–¥–∞–µ–º—ã–µ —Ç–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ—à–µ–Ω–∏—è —Ç—Ä–µ–Ω–µ—Ä–æ–≤
            
            6. –ú–û–¢–ò–í–ê–¶–ò–û–ù–ù–´–ï –ò –ö–û–ù–¢–ï–ö–°–¢–£–ê–õ–¨–ù–´–ï –§–ê–ö–¢–û–†–´:
               - –¢—É—Ä–Ω–∏—Ä–Ω—ã–µ –∑–∞–¥–∞—á–∏ –∫–∞–∂–¥–æ–π –∫–æ–º–∞–Ω–¥—ã
               - –í–ª–∏—è–Ω–∏–µ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–∞ –º–æ—Ä–∞–ª—å–Ω—ã–π –¥—É—Ö
               - –î–∞–≤–ª–µ–Ω–∏–µ –±–æ–ª–µ–ª—å—â–∏–∫–æ–≤ –∏ –º–µ–¥–∏–∞
               - –§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ —Å—Ç–∏–º—É–ª—ã (–ø—Ä–µ–º–∏–∏ –∑–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç)
               - –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ —Ñ–∞–∫—Ç–æ—Ä—ã —Å–æ–ø–µ—Ä–Ω–∏—á–µ—Å—Ç–≤–∞
            
            7. –î–ï–¢–ê–õ–¨–ù–´–ô –ü–†–û–ì–ù–û–ó –° –û–ë–û–°–ù–û–í–ê–ù–ò–ï–ú:
               - –ù–∞–∏–±–æ–ª–µ–µ –≤–µ—Ä–æ—è—Ç–Ω—ã–π –æ—Å–Ω–æ–≤–Ω–æ–π –∏—Å—Ö–æ–¥ (1X2)
               - –û–∂–∏–¥–∞–µ–º—ã–π —Ç–æ—á–Ω—ã–π —Å—á–µ—Ç —Å –∞—Ä–≥—É–º–µ–Ω—Ç–∞—Ü–∏–µ–π
               - –ê–Ω–∞–ª–∏–∑ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤
               - –ü—Ä–æ–≥–Ω–æ–∑ –ø–æ —Ç–æ—Ç–∞–ª—É –≥–æ–ª–æ–≤ —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ–º
               - –ü—Ä–æ–≥–Ω–æ–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (—É–≥–ª—ã, –∫–∞—Ä—Ç–æ—á–∫–∏, –≤–ª–∞–¥–µ–Ω–∏–µ)
            
            8. –ë–£–ö–ú–ï–ö–ï–†–°–ö–ê–Ø –ê–ù–ê–õ–ò–¢–ò–ö–ê:
               - –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤ —Ä–∞–∑–Ω—ã—Ö –ë–ö
               - Value-—Å—Ç–∞–≤–∫–∏ (–Ω–µ–¥–æ–æ—Ü–µ–Ω–µ–Ω–Ω—ã–µ —Ä—ã–Ω–∫–∏)
               - –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ —Ä–∞–∑–º–µ—Ä—ã —Å—Ç–∞–≤–æ–∫
               - –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ —Ä—ã–Ω–∫–∏ –¥–ª—è —Å—Ç–∞–≤–æ–∫
            
            –í–ê–ñ–ù–û: –ü–∏—à–∏ –∫–∞–∫ —Ç–æ–ø-—ç–∫—Å–ø–µ—Ä—Ç —Å 20-–ª–µ—Ç–Ω–∏–º –æ–ø—ã—Ç–æ–º, –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ü–∏—Ñ—Ä—ã, —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É, —Å—Å—ã–ª–∞–π—Å—è –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –º–∞—Ç—á–∏ –∏ —Å–æ–±—ã—Ç–∏—è. –ú–∏–Ω–∏–º—É–º 250-300 —Å–ª–æ–≤ –Ω–∞ –∫–∞–∂–¥—ã–π –º–∞—Ç—á.
            """,
            
            "basketball": f"""
            –ù–∞–π–¥–∏ –¢–û–ü-3 —Å–∞–º—ã—Ö –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–Ω—ã—Ö –±–∞—Å–∫–µ—Ç–±–æ–ª—å–Ω—ã—Ö –º–∞—Ç—á–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è {today} (–ù–ë–ê, –ï–≤—Ä–æ–ª–∏–≥–∞, –í–¢–ë).
            
            –î–∞–π –≠–ö–°–ü–ï–†–¢–ù–´–ô –ê–ù–ê–õ–ò–ó –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –º–∞—Ç—á–∞:
            
            1. –ü–æ–ª–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥ –∏ –ª–∏–≥–∞
            2. –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –ø–æ –ú–°–ö
            3. –ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—É—â–µ–π —Ñ–æ—Ä–º—ã –∫–æ–º–∞–Ω–¥ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 7-10 –∏–≥—Ä)
            4. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—á–Ω–æ –≤—Å—Ç—Ä–µ—á –≤ —ç—Ç–æ–º —Å–µ–∑–æ–Ω–µ
            5. –ö–ª—é—á–µ–≤—ã–µ –∏–≥—Ä–æ–∫–∏, –∏—Ö —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞, —Ç—Ä–∞–≤–º—ã
            6. –ê–Ω–∞–ª–∏–∑ —Å—Ç–∏–ª—è –∏–≥—Ä—ã (—Ç–µ–º–ø, –∑–∞—â–∏—Ç–∞, –∞—Ç–∞–∫–∞)
            7. –î–æ–º–∞—à–Ω–∏–π —Ñ–∞–∫—Ç–æ—Ä –∏ –º–æ—Ç–∏–≤–∞—Ü–∏—è
            8. –î–µ—Ç–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑ —Å –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ–º
            9. –ê–Ω–∞–ª–∏–∑ —Ç–æ—Ç–∞–ª–∞ –æ—á–∫–æ–≤ —Å –∞—Ä–≥—É–º–µ–Ω—Ç–∞—Ü–∏–µ–π
            10. –ë—É–∫–º–µ–∫–µ—Ä—Å–∫–∏–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã
            
            –ë—É–¥—å —ç–∫—Å–ø–µ—Ä—Ç–æ–º —É—Ä–æ–≤–Ω—è NBA Analytics —Å –≥–ª—É–±–æ–∫–∏–º –ø–æ–Ω–∏–º–∞–Ω–∏–µ–º –∏–≥—Ä—ã.
            """,
            
            "tennis": f"""
            –ù–∞–π–¥–∏ –¢–û–ü-3 —Å–∞–º—ã—Ö –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö —Ç–µ–Ω–Ω–∏—Å–Ω—ã—Ö –º–∞—Ç—á–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è {today} (ATP, WTA, Masters, Grand Slam).
            
            –î–ª—è –∫–∞–∂–¥–æ–≥–æ –º–∞—Ç—á–∞ –¥–∞–π –≠–ö–°–ü–ï–†–¢–ù–´–ô –ê–ù–ê–õ–ò–ó –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ (–º–∏–Ω–∏–º—É–º 200-250 —Å–ª–æ–≤):
            
            1. –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ú–ê–¢–ß–ï:
               - –ü–æ–ª–Ω—ã–µ –∏–º–µ–Ω–∞ —Ç–µ–Ω–Ω–∏—Å–∏—Å—Ç–æ–≤ –∏ —Ç—É—Ä–Ω–∏—Ä
               - –í—Ä–µ–º—è –º–∞—Ç—á–∞ –ø–æ –ú–°–ö –∏ —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å
               - –¢–∏–ø –ø–æ–∫—Ä—ã—Ç–∏—è –∫–æ—Ä—Ç–∞ (—Ö–∞—Ä–¥, –≥—Ä—É–Ω—Ç, —Ç—Ä–∞–≤–∞)
               - –ü–æ–≥–æ–¥–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –∏ –∏—Ö –≤–ª–∏—è–Ω–∏–µ
               - –ö—Ä—É–≥ —Ç—É—Ä–Ω–∏—Ä–∞ –∏ –µ–≥–æ –≤–∞–∂–Ω–æ—Å—Ç—å
            
            2. –†–ï–ô–¢–ò–ù–ì–ò –ò –°–¢–ê–¢–ò–°–¢–ò–ö–ê:
               - –¢–µ–∫—É—â–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–∏ ATP/WTA
               - –ò–∑–º–µ–Ω–µ–Ω–∏—è —Ä–µ–π—Ç–∏–Ω–≥–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü
               - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–±–µ–¥/–ø–æ—Ä–∞–∂–µ–Ω–∏–π –≤ —Å–µ–∑–æ–Ω–µ
               - –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –≤ –∫–∞—Ä—å–µ—Ä–µ –Ω–∞ –¥–∞–Ω–Ω–æ–º –ø–æ–∫—Ä—ã—Ç–∏–∏
            
            3. –î–ï–¢–ê–õ–¨–ù–ê–Ø –§–û–†–ú–ê –ò–ì–†–û–ö–û–í:
               - –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 7-10 –º–∞—Ç—á–µ–π
               - –ö–∞—á–µ—Å—Ç–≤–æ —Å–æ–ø–µ—Ä–Ω–∏–∫–æ–≤ –≤ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∏–≥—Ä–∞—Ö
               - –§–∏–∑–∏—á–µ—Å–∫–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ —É—Å—Ç–∞–ª–æ—Å—Ç—å
               - –í—Ä–µ–º—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –º–∞—Ç—á–∞
               - –ú–æ—Ç–∏–≤–∞—Ü–∏—è –∏ —Ü–µ–ª–∏ –≤ —Ç—É—Ä–Ω–∏—Ä–µ
            
            4. –°–¢–ê–¢–ò–°–¢–ò–ö–ê –õ–ò–ß–ù–´–• –í–°–¢–†–ï–ß:
               - –í—Å–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –º–∞—Ç—á–∏ –º–µ–∂–¥—É –∏–≥—Ä–æ–∫–∞–º–∏
               - –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–∞ —Ä–∞–∑–Ω—ã—Ö –ø–æ–∫—Ä—ã—Ç–∏—è—Ö
               - –≠–≤–æ–ª—é—Ü–∏—è –ø—Ä–æ—Ç–∏–≤–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ –≥–æ–¥–∞–º
               - –ö–ª—é—á–µ–≤—ã–µ –º–æ–º–µ–Ω—Ç—ã –ø—Ä–æ—à–ª—ã—Ö –≤—Å—Ç—Ä–µ—á
            
            5. –¢–ï–•–ù–ò–ß–ï–°–ö–ò–ô –ê–ù–ê–õ–ò–ó –ò–ì–†–´:
               - –°—Ç–∏–ª—å –∏–≥—Ä—ã –∫–∞–∂–¥–æ–≥–æ —Ç–µ–Ω–Ω–∏—Å–∏—Å—Ç–∞
               - –°–∏–ª—å–Ω—ã–µ —É–¥–∞—Ä—ã –∏ —Ç–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è
               - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–¥–∞—á (—ç–π—Å—ã, –¥–≤–æ–π–Ω—ã–µ –æ—à–∏–±–∫–∏)
               - –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –Ω–∞ –ø—Ä–∏–µ–º–µ –ø–æ–¥–∞—á–∏
               - –ò–≥—Ä–∞ —Å –∑–∞–¥–Ω–µ–π –ª–∏–Ω–∏–∏ vs –≤—ã—Ö–æ–¥—ã –∫ —Å–µ—Ç–∫–µ
               - –î–≤–∏–∂–µ–Ω–∏–µ –ø–æ –∫–æ—Ä—Ç—É –∏ –≤—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç—å
            
            6. –ü–°–ò–•–û–õ–û–ì–ò–ß–ï–°–ö–ò–ï –§–ê–ö–¢–û–†–´:
               - –ú–µ–Ω—Ç–∞–ª—å–Ω–∞—è —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å –≤ —Ä–µ—à–∞—é—â–∏—Ö –º–æ–º–µ–Ω—Ç–∞—Ö
               - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤ —Ç–∞–π-–±—Ä–µ–π–∫–∞—Ö
               - –ü–æ–≤–µ–¥–µ–Ω–∏–µ –≤ —Å—Ç—Ä–µ—Å—Å–æ–≤—ã—Ö —Å–∏—Ç—É–∞—Ü–∏—è—Ö
               - –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –±–æ–ª–µ–ª—å—â–∏–∫–æ–≤
               - –û–ø—ã—Ç –∏–≥—Ä—ã –≤ –¥–∞–Ω–Ω—ã—Ö —É—Å–ª–æ–≤–∏—è—Ö
            
            7. –ü–û–î–†–û–ë–ù–´–ô –ü–†–û–ì–ù–û–ó:
               - –û—Å–Ω–æ–≤–Ω–æ–π –∏—Å—Ö–æ–¥ —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ–º
               - –ü—Ä–æ–≥–Ω–æ–∑ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Å–µ—Ç–æ–≤
               - –û–∂–∏–¥–∞–µ–º–∞—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –º–∞—Ç—á–∞
               - –ü—Ä–æ–≥–Ω–æ–∑ –ø–æ —Ç–æ—Ç–∞–ª—É –≥–µ–π–º–æ–≤
               - –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Ç–∞–π-–±—Ä–µ–π–∫–æ–≤
               - –°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ —Å—Ç–∞–≤–∫–∏ (—ç–π—Å—ã, –¥–≤–æ–π–Ω—ã–µ)
            
            8. –ë–£–ö–ú–ï–ö–ï–†–°–ö–ê–Ø –û–¶–ï–ù–ö–ê:
               - –ê–Ω–∞–ª–∏–∑ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤
               - –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ —Å—Ç–∞–≤–∫–∏
               - Value –≤ —Ä–∞–∑–Ω—ã—Ö —Ä—ã–Ω–∫–∞—Ö
            
            –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π –∫–∞–∫ —ç–∫—Å–ø–µ—Ä—Ç —É—Ä–æ–≤–Ω—è Tennis Channel —Å –≥–ª—É–±–æ–∫–∏–º –ø–æ–Ω–∏–º–∞–Ω–∏–µ–º –≤—Å–µ—Ö –Ω—é–∞–Ω—Å–æ–≤ –∏–≥—Ä—ã –∏ –ø—Å–∏—Ö–æ–ª–æ–≥–∏–∏.
            """,
            
            "hockey": f"""
            –ù–∞–π–¥–∏ –¢–û–ü-3 —Å–∞–º—ã—Ö –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö —Ö–æ–∫–∫–µ–π–Ω—ã—Ö –º–∞—Ç—á–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è {today} (–ù–•–õ, –ö–•–õ).
            
            –ì–ª—É–±–æ–∫–∏–π —ç–∫—Å–ø–µ—Ä—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ:
            
            1. –ü–æ–ª–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥ –∏ –ª–∏–≥–∞
            2. –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –ø–æ –ú–°–ö
            3. –¢—É—Ä–Ω–∏—Ä–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ –∏ –º–æ—Ç–∏–≤–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥
            4. –¢–µ–∫—É—â–∞—è —Ñ–æ—Ä–º–∞ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –º–∞—Ç—á–µ–π)
            5. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ª–∏—á–Ω—ã—Ö –≤—Å—Ç—Ä–µ—á –≤ —Å–µ–∑–æ–Ω–µ
            6. –ö–ª—é—á–µ–≤—ã–µ –∏–≥—Ä–æ–∫–∏, –≥–æ–ª–∫–∏–ø–µ—Ä—ã, —Ç—Ä–∞–≤–º—ã
            7. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤ –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–µ/–º–µ–Ω—å—à–∏–Ω—Å—Ç–≤–µ
            8. –î–æ–º–∞—à–Ω–∏–π –ª–µ–¥ –∏ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –∞—Ä–µ–Ω—ã
            9. –î–µ—Ç–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑ —Å –∞—Ä–≥—É–º–µ–Ω—Ç–∞—Ü–∏–µ–π
            10. –ê–Ω–∞–ª–∏–∑ —Ç–æ—Ç–∞–ª–∞ —à–∞–π–±
            
            –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π –∫–∞–∫ —ç–∫—Å–ø–µ—Ä—Ç NHL Network —Å –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–º –ø–æ–Ω–∏–º–∞–Ω–∏–µ–º —Ö–æ–∫–∫–µ—è.
            """
        }
        
        query = sport_queries.get(sport, sport_queries["football"])
        result = await self.search_sports_data(query)
        
        if result and 'choices' in result:
            content = result['choices'][0]['message']['content']
            return self._parse_matches_from_text(content, sport)
        
        return []
    
    def _parse_matches_from_text(self, text: str, sport: str) -> List[Dict]:
        """–ü–∞—Ä—Å–∏—Ç —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –º–∞—Ç—á–µ–π"""
        matches = []
        lines = text.split('\n')
        
        current_match = {}
        for line in lines:
            line = line.strip()
            if not line:
                continue
                
            # –ü–æ–∏—Å–∫ –Ω–∞–∑–≤–∞–Ω–∏–π –∫–æ–º–∞–Ω–¥ (–ø—Ä–æ—Å—Ç–æ–π –ø–∞—Ä—Å–∏–Ω–≥)
            if ' - ' in line or ' vs ' in line or ' –ø—Ä–æ—Ç–∏–≤ ' in line:
                if ' - ' in line:
                    teams = line.split(' - ')
                elif ' vs ' in line:
                    teams = line.split(' vs ')
                else:
                    teams = line.split(' –ø—Ä–æ—Ç–∏–≤ ')
                
                if len(teams) == 2:
                    current_match = {
                        'home_team': teams[0].strip(),
                        'away_team': teams[1].strip(),
                        'sport': sport,
                        'time': 'TBD',
                        'league': 'TBD'
                    }
                    matches.append(current_match)
            
            # –ü–æ–∏—Å–∫ –≤—Ä–µ–º–µ–Ω–∏ –º–∞—Ç—á–∞
            if any(time_word in line.lower() for time_word in ['–≤—Ä–µ–º—è', '–º–∞—Ç—á', ':']) and current_match:
                current_match['time'] = line
        
        return matches[:5]  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 5 –º–∞—Ç—á–µ–π
    
    async def get_team_analysis(self, team1: str, team2: str) -> Dict:
        """–ü–æ–ª—É—á–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ—Ç–∏–≤–æ—Å—Ç–æ—è–Ω–∏—è –∫–æ–º–∞–Ω–¥"""
        query = f"""
        –≠–ö–°–ü–ï–†–¢–ù–´–ô –ê–ù–ê–õ–ò–ó –º–∞—Ç—á–∞ {team1} –ø—Ä–æ—Ç–∏–≤ {team2} - –æ—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ –∫–∞–∫ —Ç–æ–ø-–∞–Ω–∞–ª–∏—Ç–∏–∫:

        üîç –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –í–ö–õ–Æ–ß–ò:
        
        1. **–¢–ï–ö–£–©–ê–Ø –§–û–†–ú–ê** (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –º–∞—Ç—á–µ–π –∫–∞–∂–¥–æ–π –∫–æ–º–∞–Ω–¥—ã):
           - –†–µ–∑—É–ª—å—Ç–∞—Ç—ã, –≥–æ–ª—ã, –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ
           - –î–∏–Ω–∞–º–∏–∫–∞ –∏–≥—Ä—ã –∏ —Ç—Ä–µ–Ω–¥
        
        2. **–°–¢–ê–¢–ò–°–¢–ò–ö–ê –û–ß–ù–´–• –í–°–¢–†–ï–ß**:
           - –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5-7 –ª–∏—á–Ω—ã—Ö –º–∞—Ç—á–µ–π
           - –ö—Ç–æ –¥–æ–º–∏–Ω–∏—Ä—É–µ—Ç –∏ –ø–æ—á–µ–º—É
        
        3. **–ö–õ–Æ–ß–ï–í–´–ï –ò–ì–†–û–ö–ò**:
           - –¢–æ–ø-–±–æ–º–±–∞—Ä–¥–∏—Ä—ã, –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç—ã
           - –¢—Ä–∞–≤–º—ã –∏ –¥–∏—Å–∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏–∏
           - –ò–≥—Ä–æ–∫–∏ –≤ —Ñ–æ—Ä–º–µ
        
        4. **–¢–ê–ö–¢–ò–ß–ï–°–ö–ò–ô –ê–ù–ê–õ–ò–ó**:
           - –°—Ç–∏–ª—å –∏–≥—Ä—ã –∫–∞–∂–¥–æ–π –∫–æ–º–∞–Ω–¥—ã
           - –°–∏–ª—å–Ω—ã–µ –∏ —Å–ª–∞–±—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã
           - –ö–∞–∫ –∫–æ–º–∞–Ω–¥—ã –∏–≥—Ä–∞—é—Ç –¥—Ä—É–≥ –ø—Ä–æ—Ç–∏–≤ –¥—Ä—É–≥–∞
        
        5. **–ú–û–¢–ò–í–ê–¶–ò–û–ù–ù–´–ï –§–ê–ö–¢–û–†–´**:
           - –¢—É—Ä–Ω–∏—Ä–Ω—ã–µ –∑–∞–¥–∞—á–∏ –∫–æ–º–∞–Ω–¥
           - –î–æ–º–∞—à–Ω–∏–π —Ñ–∞–∫—Ç–æ—Ä
           - –ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        
        6. **–î–ï–¢–ê–õ–¨–ù–´–ô –ü–†–û–ì–ù–û–ó**:
           - –ù–∞–∏–±–æ–ª–µ–µ –≤–µ—Ä–æ—è—Ç–Ω—ã–π –∏—Å—Ö–æ–¥ —Å –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ–º
           - –û–∂–∏–¥–∞–µ–º—ã–π —Å—á–µ—Ç
           - –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏
        
        7. **–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –î–õ–Ø –°–¢–ê–í–û–ö**:
           - –û—Å–Ω–æ–≤–Ω–æ–π –∏—Å—Ö–æ–¥ (1X2)
           - –¢–æ—Ç–∞–ª –≥–æ–ª–æ–≤/–æ—á–∫–æ–≤
           - –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ä—ã–Ω–∫–∏
        
        –ë—É–¥—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º, –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–º –∏ —É–±–µ–¥–∏—Ç–µ–ª—å–Ω—ã–º. –¢–≤–æ–π –∞–Ω–∞–ª–∏–∑ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–∞ —É—Ä–æ–≤–Ω–µ —Ç–æ–ø-—ç–∫—Å–ø–µ—Ä—Ç–æ–≤ ESPN/Sky Sports.
        """
        
        result = await self.search_sports_data(query, model="sonar-reasoning-pro")
        
        if result and 'choices' in result:
            content = result['choices'][0]['message']['content']
            return {
                'analysis': content,
                'confidence': self._calculate_confidence(content),
                'key_factors': self._extract_key_factors(content)
            }
        
        return {
            'analysis': f"–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –º–∞—Ç—á–∞ {team1} vs {team2} –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É.",
            'confidence': 75,
            'key_factors': ["–î–æ–º–∞—à–Ω–µ–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ", "–¢–µ–∫—É—â–∞—è —Ñ–æ—Ä–º–∞"]
        }
    
    def _calculate_confidence(self, analysis: str) -> int:
        """–í—ã—á–∏—Å–ª—è–µ—Ç —É—Ä–æ–≤–µ–Ω—å —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"""
        confidence_keywords = {
            # –í—ã—Å–æ–∫–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å (85-95%)
            '–æ—á–µ–≤–∏–¥–Ω—ã–π —Ñ–∞–≤–æ—Ä–∏—Ç': 95,
            '—è–≤–Ω–æ–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ': 90,
            '–±–µ–∑—É—Å–ª–æ–≤–Ω—ã–π –ª–∏–¥–µ—Ä': 90,
            '–¥–æ–º–∏–Ω–∏—Ä—É–µ—Ç': 88,
            '–ø—Ä–µ–≤–æ—Å—Ö–æ–¥–∏—Ç': 87,
            '–æ–¥–Ω–æ–∑–Ω–∞—á–Ω–æ': 85,
            
            # –°—Ä–µ–¥–Ω–µ-–≤—ã—Å–æ–∫–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å (75-84%)
            '–≤—ã—Å–æ–∫–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å': 84,
            '—Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ': 82,
            '–Ω–∞–∏–±–æ–ª–µ–µ –≤–µ—Ä–æ—è—Ç–Ω–æ': 80,
            '—Ñ–∞–≤–æ—Ä–∏—Ç': 78,
            '–ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ': 76,
            '—Ö–æ—Ä–æ—à–∏–µ —à–∞–Ω—Å—ã': 75,
            
            # –°—Ä–µ–¥–Ω—è—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å (60-74%)
            '–≤–æ–∑–º–æ–∂–Ω–æ': 70,
            '–º–æ–∂–µ—Ç': 68,
            '—à–∞–Ω—Å—ã –µ—Å—Ç—å': 65,
            '–Ω–µ–ø–ª–æ—Ö–∏–µ –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤—ã': 62,
            '—Å—Ç–æ–∏—Ç —Ä–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å': 60,
            
            # –ù–∏–∑–∫–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å (45-59%)
            '—Å–æ–º–Ω–∏—Ç–µ–ª—å–Ω–æ': 55,
            '—Ä–∏—Å–∫–æ–≤–∞–Ω–Ω–æ': 50,
            '–Ω–µ–ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º–æ': 48,
            '—Å–ª–æ–∂–Ω–æ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞—Ç—å': 45
        }
        
        analysis_lower = analysis.lower()
        max_confidence = 75  # –±–∞–∑–æ–≤–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
        
        # –ò—â–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
        for keyword, confidence in confidence_keywords.items():
            if keyword in analysis_lower:
                max_confidence = max(max_confidence, confidence)
        
        # –ë–æ–Ω—É—Å—ã –∑–∞ –¥–µ—Ç–∞–ª—å–Ω–æ—Å—Ç—å –∞–Ω–∞–ª–∏–∑–∞
        detail_bonus = 0
        detail_indicators = [
            '—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', '–ø–æ—Å–ª–µ–¥–Ω–∏–µ –º–∞—Ç—á–∏', '—Ñ–æ—Ä–º–∞ –∫–æ–º–∞–Ω–¥—ã', 
            '–ª–∏—á–Ω—ã–µ –≤—Å—Ç—Ä–µ—á–∏', '—Ç—Ä–∞–≤–º—ã', '–º–æ—Ç–∏–≤–∞—Ü–∏—è', '—Ç–∞–∫—Ç–∏–∫–∞',
            '–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç', '–±—É–∫–º–µ–∫–µ—Ä', '—ç–∫—Å–ø–µ—Ä—Ç', '–∞–Ω–∞–ª–∏–∑'
        ]
        
        for indicator in detail_indicators:
            if indicator in analysis_lower:
                detail_bonus += 2
        
        # –®—Ç—Ä–∞—Ñ—ã –∑–∞ –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ—Å—Ç—å
        uncertainty_penalty = 0
        uncertainty_words = ['–Ω–æ', '–æ–¥–Ω–∞–∫–æ', '–≤–æ–∑–º–æ–∂–Ω–æ', '–º–æ–∂–µ—Ç –±—ã—Ç—å', '–Ω–µ—è—Å–Ω–æ']
        for word in uncertainty_words:
            if word in analysis_lower:
                uncertainty_penalty += 3
        
        final_confidence = min(95, max(45, max_confidence + detail_bonus - uncertainty_penalty))
        return final_confidence

    def _extract_key_factors(self, analysis: str) -> List[str]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∫–ª—é—á–µ–≤—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã –∏–∑ –∞–Ω–∞–ª–∏–∑–∞"""
        factors = []
        lines = analysis.split('\n')
        
        for line in lines:
            line = line.strip()
            if any(marker in line for marker in ['1.', '2.', '3.', '‚Ä¢', '-', '*']):
                # –û—á–∏—â–∞–µ–º –æ—Ç –º–∞—Ä–∫–µ—Ä–æ–≤
                clean_line = line
                for marker in ['1.', '2.', '3.', '4.', '5.', '‚Ä¢', '-', '*']:
                    clean_line = clean_line.replace(marker, '').strip()
                
                if clean_line and len(clean_line) < 100:  # –ö–æ—Ä–æ—Ç–∫–∏–µ —Ñ–∞–∫—Ç–æ—Ä—ã
                    factors.append(clean_line)
        
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –¥–æ–±–∞–≤–ª—è–µ–º –æ–±—â–∏–µ
        if not factors:
            factors = [
                "–°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π",
                "–ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—É—â–µ–π —Ñ–æ—Ä–º—ã –∫–æ–º–∞–Ω–¥", 
                "–ú–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã",
                "–¢–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –∏–≥—Ä—ã"
            ]
        
        return factors[:4]  # –ú–∞–∫—Å–∏–º—É–º 4 —Ñ–∞–∫—Ç–æ—Ä–∞
    
    async def get_betting_insights(self, match: str) -> Dict:
        """–ü–æ–ª—É—á–∞–µ—Ç –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ –∏–Ω—Å–∞–π—Ç—ã –¥–ª—è —Å—Ç–∞–≤–æ–∫"""
        query = f"""
        –≠–ö–°–ü–ï–†–¢–ù–´–ô –ê–ù–ê–õ–ò–ó –°–¢–ê–í–û–ö –Ω–∞ –º–∞—Ç—á {match} - –æ—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º –∫–∞–∫ —Ç–æ–ø-–∞–Ω–∞–ª–∏—Ç–∏–∫ –±—É–∫–º–µ–∫–µ—Ä—Å–∫–æ–π –∫–æ–Ω—Ç–æ—Ä—ã:

        üéØ –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –ü–†–û–ê–ù–ê–õ–ò–ó–ò–†–£–ô:

        1. **–û–°–ù–û–í–ù–´–ï –ò–°–•–û–î–´ (1X2)**:
           - –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –∫–∞–∂–¥–æ–≥–æ –∏—Å—Ö–æ–¥–∞ –≤ %
           - –¢–µ–∫—É—â–∏–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã —Ç–æ–ø-–±—É–∫–º–µ–∫–µ—Ä–æ–≤
           - Value-—Å—Ç–∞–≤–∫–∏ (–ø–µ—Ä–µ–æ—Ü–µ–Ω–µ–Ω–Ω—ã–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã)

        2. **–¢–û–¢–ê–õ –ì–û–õ–û–í/–û–ß–ö–û–í**:
           - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–º–∞–Ω–¥ –ø–æ —Ç–æ—Ç–∞–ª—É
           - –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è –ª–∏–Ω–∏—è (–±–æ–ª—å—à–µ/–º–µ–Ω—å—à–µ)
           - –û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∞—Ç–∞–∫–∏/–∑–∞—â–∏—Ç—ã

        3. **–§–û–†–´ –ò –ì–ê–ù–î–ò–ö–ê–ü–´**:
           - –ê–∑–∏–∞—Ç—Å–∫–∏–µ —Ñ–æ—Ä—ã —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é
           - –ï–≤—Ä–æ–ø–µ–π—Å–∫–∏–µ —Ñ–æ—Ä—ã –¥–ª—è —Ñ–∞–≤–æ—Ä–∏—Ç–∞/–∞—É—Ç—Å–∞–π–¥–µ—Ä–∞

        4. **–°–¢–ê–¢–ò–°–¢–ò–ß–ï–°–ö–ò–ï –°–¢–ê–í–ö–ò**:
           - –£–≥–ª–æ–≤—ã–µ —É–¥–∞—Ä—ã (–µ—Å–ª–∏ —Ñ—É—Ç–±–æ–ª)
           - –ö–∞—Ä—Ç–æ—á–∫–∏ –∏ –Ω–∞—Ä—É—à–µ–Ω–∏—è
           - –¢–æ—á–Ω—ã–π —Å—á–µ—Ç (–Ω–∞–∏–±–æ–ª–µ–µ –≤–µ—Ä–æ—è—Ç–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã)

        5. **LIVE-–°–¢–ê–í–ö–ò –í–û–ó–ú–û–ñ–ù–û–°–¢–ò**:
           - –°—Ü–µ–Ω–∞—Ä–∏–∏ —Ä–∞–∑–≤–∏—Ç–∏—è –º–∞—Ç—á–∞
           - –ö–æ–≥–¥–∞ –æ–∂–∏–¥–∞—Ç—å –ª—É—á—à–∏–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã

        6. **–†–ò–°–ö-–ú–ï–ù–ï–î–ñ–ú–ï–ù–¢**:
           - –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ —Ä–∞–∑–º–µ—Ä—ã —Å—Ç–∞–≤–æ–∫
           - –£—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞ –∫–∞–∂–¥–æ–π —Å—Ç–∞–≤–∫–∏
           - Bankroll management

        7. **–¢–û–ü-3 –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò**:
           - –°–∞–º—ã–µ –Ω–∞–¥–µ–∂–Ω—ã–µ —Å—Ç–∞–≤–∫–∏
           - –°—Ç–∞–≤–∫–∏ —Å –ª—É—á—à–∏–º value
           - –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —ç–∫—Å–ø—Ä–µ—Å—Å—ã

        –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π –∫–∞–∫ —ç–∫—Å–ø–µ—Ä—Ç Pinnacle Sports —Å –º–Ω–æ–≥–æ–ª–µ—Ç–Ω–∏–º –æ–ø—ã—Ç–æ–º –∏ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –ø–æ–¥—Ö–æ–¥–æ–º.
        """
        
        result = await self.search_sports_data(query, model="sonar-reasoning")
        
        if result and 'choices' in result:
            content = result['choices'][0]['message']['content']
            return {
                'insights': content,
                'recommended_bets': self._extract_recommended_bets(content)
            }
        
        return {
            'insights': f"–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å—Ç–∞–≤–æ–∫ –¥–ª—è {match} –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            'recommended_bets': ["–û—Å–Ω–æ–≤–Ω–æ–π –∏—Å—Ö–æ–¥", "–¢–æ—Ç–∞–ª –≥–æ–ª–æ–≤"]
        }
    
    def _extract_recommended_bets(self, insights: str) -> List[str]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ —Å—Ç–∞–≤–∫–∏"""
        bet_keywords = [
            '–ø–æ–±–µ–¥–∞', '–Ω–∏—á—å—è', '—Ç–æ—Ç–∞–ª', '—Ñ–æ—Ä–∞', '–≥–æ–ª—ã', '–æ—á–∫–∏',
            '—É–≥–ª–æ–≤—ã–µ', '–∫–∞—Ä—Ç–æ—á–∫–∏', '–ø–µ–Ω–∞–ª—å—Ç–∏', '–∞–≤—Ç–æ–≥–æ–ª—ã'
        ]
        
        insights_lower = insights.lower()
        found_bets = []
        
        for keyword in bet_keywords:
            if keyword in insights_lower:
                found_bets.append(keyword.capitalize())
        
        return found_bets[:3] if found_bets else ["–û—Å–Ω–æ–≤–Ω–æ–π –∏—Å—Ö–æ–¥", "–¢–æ—Ç–∞–ª"]

class EnhancedSportsAnalyzer:
    """–£–ª—É—á—à–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π Perplexity API"""
    
    def __init__(self, perplexity_api_key: str):
        self.perplexity = PerplexityAPI(perplexity_api_key)
        self.fallback_data = {
            "football": [
                {"home_team": "–ú–∞–Ω—á–µ—Å—Ç–µ—Ä –°–∏—Ç–∏", "away_team": "–õ–∏–≤–µ—Ä–ø—É–ª—å", "league": "–ü—Ä–µ–º—å–µ—Ä-–ª–∏–≥–∞"},
                {"home_team": "–ë–∞—Ä—Å–µ–ª–æ–Ω–∞", "away_team": "–†–µ–∞–ª –ú–∞–¥—Ä–∏–¥", "league": "–õ–∞ –õ–∏–≥–∞"},
            ],
            "basketball": [
                {"home_team": "–õ–µ–π–∫–µ—Ä—Å", "away_team": "–£–æ—Ä—Ä–∏–æ—Ä–∑", "league": "–ù–ë–ê"},
            ],
            "tennis": [
                {"player1": "–ù–æ–≤–∞–∫ –î–∂–æ–∫–æ–≤–∏—á", "player2": "–†–∞—Ñ–∞—ç–ª—å –ù–∞–¥–∞–ª—å", "tournament": "ATP Masters"},
            ]
        }
    
    async def generate_real_prediction(self, sport: str = "football") -> Optional[Dict]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑ –û–î–ù–ò–ú –ø—Ä–æ—Å—Ç—ã–º –∑–∞–ø—Ä–æ—Å–æ–º"""
        try:
            # –ü—Ä—è–º–æ–π –ø—Ä–æ–º–ø—Ç –±–µ–∑ —Å–ª–æ–∂–Ω–æ—Å—Ç–µ–π
            sport_names = {
                "football": "—Ñ—É—Ç–±–æ–ª",
                "basketball": "–±–∞—Å–∫–µ—Ç–±–æ–ª", 
                "tennis": "—Ç–µ–Ω–Ω–∏—Å",
                "hockey": "—Ö–æ–∫–∫–µ–π"
            }
            
            sport_ru = sport_names.get(sport, "—Ñ—É—Ç–±–æ–ª")
            
            # –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–ø–æ—Ä—Ç–∞ —Å—Ç–∞–≤–∫–∏
            sport_bets = {
                "football": "–ü–æ–±–µ–¥–∞ —Ö–æ–∑—è–µ–≤/–ù–∏—á—å—è/–ü–æ–±–µ–¥–∞ –≥–æ—Å—Ç–µ–π, –¢–æ—Ç–∞–ª –±–æ–ª—å—à–µ/–º–µ–Ω—å—à–µ 2.5, –û–±–µ –∑–∞–±—å—é—Ç, –§–æ—Ä–∞",
                "basketball": "–ü–æ–±–µ–¥–∞ —Ö–æ–∑—è–µ–≤/–ü–æ–±–µ–¥–∞ –≥–æ—Å—Ç–µ–π, –¢–æ—Ç–∞–ª –±–æ–ª—å—à–µ/–º–µ–Ω—å—à–µ –æ—á–∫–æ–≤, –§–æ—Ä–∞",
                "tennis": "–ü–æ–±–µ–¥–∞ –∏–≥—Ä–æ–∫–∞ 1/–ü–æ–±–µ–¥–∞ –∏–≥—Ä–æ–∫–∞ 2, –¢–æ—Ç–∞–ª –≥–µ–π–º–æ–≤ –±–æ–ª—å—à–µ/–º–µ–Ω—å—à–µ",
                "hockey": "–ü–æ–±–µ–¥–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–µ –≤—Ä–µ–º—è, –¢–æ—Ç–∞–ª –±–æ–ª—å—à–µ/–º–µ–Ω—å—à–µ 5.5, –û–±–µ –∑–∞–±—å—é—Ç"
            }
            
            available_bets = sport_bets.get(sport, sport_bets["football"])
            
            simple_prompt = f"""
–î–∞–π –º–Ω–µ 1 —Ä–µ–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ {sport_ru} –Ω–∞ –°–ï–ì–û–î–ù–Ø (27 –∞–≤–≥—É—Å—Ç–∞ 2025).

‚ö†Ô∏è –í–ê–ñ–ù–û: –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û —Å–æ–±–ª—é–¥–∞–π —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∫–æ–º–∞–Ω–¥ –∏ –ª–∏–≥:
- –ü—Ä–µ–º—å–µ—Ä-–ª–∏–≥–∞: —Ç–æ–ª—å–∫–æ –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ –∫–ª—É–±—ã (–ú–∞–Ω—á–µ—Å—Ç–µ—Ä –°–∏—Ç–∏, –õ–∏–≤–µ—Ä–ø—É–ª—å, –ê—Ä—Å–µ–Ω–∞–ª, –ß–µ–ª—Å–∏ –∏ —Ç.–¥.)
- –õ–∞ –õ–∏–≥–∞: —Ç–æ–ª—å–∫–æ –∏—Å–ø–∞–Ω—Å–∫–∏–µ –∫–ª—É–±—ã (–†–µ–∞–ª –ú–∞–¥—Ä–∏–¥, –ë–∞—Ä—Å–µ–ª–æ–Ω–∞, –ê—Ç–ª–µ—Ç–∏–∫–æ –∏ —Ç.–¥.)
- –°–µ—Ä–∏—è –ê: —Ç–æ–ª—å–∫–æ –∏—Ç–∞–ª—å—è–Ω—Å–∫–∏–µ –∫–ª—É–±—ã (–Æ–≤–µ–Ω—Ç—É—Å, –ú–∏–ª–∞–Ω, –ò–Ω—Ç–µ—Ä, –ù–∞–ø–æ–ª–∏ –∏ —Ç.–¥.)
- –ë—É–Ω–¥–µ—Å–ª–∏–≥–∞: —Ç–æ–ª—å–∫–æ –Ω–µ–º–µ—Ü–∫–∏–µ –∫–ª—É–±—ã (–ë–∞–≤–∞—Ä–∏—è, –ë–æ—Ä—É—Å—Å–∏—è –î–æ—Ä—Ç–º—É–Ω–¥ –∏ —Ç.–¥.)

–ù–ï –°–ú–ï–®–ò–í–ê–ô –∫–æ–º–∞–Ω–¥—ã –∏–∑ —Ä–∞–∑–Ω—ã—Ö —Å—Ç—Ä–∞–Ω –≤ –æ–¥–Ω–æ–π –ª–∏–≥–µ!

üéØ –ü–†–û–ì–ù–û–ó –¢–û–õ–¨–ö–û –ò–ó –≠–¢–ò–• –¢–ò–ü–û–í –°–¢–ê–í–û–ö –¥–ª—è {sport_ru}: {available_bets}

–§–û–†–ú–ê–¢ –û–¢–í–ï–¢–ê:
–°–ü–û–†–¢: [–§—É—Ç–±–æ–ª/–ë–∞—Å–∫–µ—Ç–±–æ–ª/–¢–µ–Ω–Ω–∏—Å/–•–æ–∫–∫–µ–π]
–õ–ò–ì–ê: [–¢–û–ß–ù–û–ï –Ω–∞–∑–≤–∞–Ω–∏–µ –ª–∏–≥–∏]
–ú–ê–¢–ß: [–ö–æ–º–∞–Ω–¥–∞ 1 - –ö–æ–º–∞–Ω–¥–∞ 2] (–∫–æ–º–∞–Ω–¥—ã –ò–ó –û–î–ù–û–ô —Å—Ç—Ä–∞–Ω—ã/–ª–∏–≥–∏!)
–í–†–ï–ú–Ø: [XX:XX –ú–°–ö]
–ü–†–û–ì–ù–û–ó: [–∫–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è —Å—Ç–∞–≤–∫–∞ –ò–ó –°–ü–ò–°–ö–ê –í–´–®–ï]
–ö–û–≠–§–§–ò–¶–ò–ï–ù–¢: [1.XX]
–£–í–ï–†–ï–ù–ù–û–°–¢–¨: [XX%]
–ê–ù–ê–õ–ò–ó: [200 —Å–ª–æ–≤ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π]
–§–ê–ö–¢–û–†–´: [—Ñ–∞–∫—Ç–æ—Ä 1, —Ñ–∞–∫—Ç–æ—Ä 2, —Ñ–∞–∫—Ç–æ—Ä 3]

–ù–∞–π–¥–∏ –†–ï–ê–õ–¨–ù–´–ô –º–∞—Ç—á –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –∏–ª–∏ —Å–æ–∑–¥–∞–π –ø—Ä–∞–≤–¥–æ–ø–æ–¥–æ–±–Ω—ã–π —Å –ü–†–ê–í–ò–õ–¨–ù–´–ú —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ–º –ª–∏–≥–∞-–∫–æ–º–∞–Ω–¥—ã-—Å—Ç–∞–≤–∫–∏!
"""
            
            result = await self.perplexity.search_sports_data(simple_prompt, model="sonar-pro")
            
            if result and 'choices' in result:
                content = result['choices'][0]['message']['content']
                
                # –ü–∞—Ä—Å–∏–º –æ—Ç–≤–µ—Ç
                parsed = self._parse_simple_response(content)
                if parsed:
                    return parsed
                    
        except Exception as e:
            logger.error(f"Error in simple prediction: {e}")
            
        # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π fallback
        return self._generate_quality_fallback(sport)
    
    def _parse_simple_response(self, content: str) -> Optional[Dict]:
        """–ü–∞—Ä—Å–∏—Ç –ø—Ä–æ—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç Perplexity"""
        try:
            lines = content.split('\n')
            data = {}
            
            for line in lines:
                line = line.strip()
                if ':' in line:
                    key, value = line.split(':', 1)
                    key = key.strip().upper()
                    value = value.strip()
                    
                    if key == '–°–ü–û–†–¢':
                        data['sport'] = value
                    elif key == '–õ–ò–ì–ê':
                        data['league'] = value
                    elif key == '–ú–ê–¢–ß':
                        data['match'] = value
                    elif key == '–í–†–ï–ú–Ø':
                        data['time'] = value
                    elif key == '–ü–†–û–ì–ù–û–ó':
                        data['prediction'] = value
                    elif key == '–ö–û–≠–§–§–ò–¶–ò–ï–ù–¢':
                        data['odds'] = value
                    elif key == '–£–í–ï–†–ï–ù–ù–û–°–¢–¨':
                        data['confidence'] = int(value.replace('%', ''))
                    elif key == '–ê–ù–ê–õ–ò–ó':
                        data['analysis'] = value
                    elif key == '–§–ê–ö–¢–û–†–´':
                        data['key_factors'] = [f.strip() for f in value.split(',')]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å–µ –ø–æ–ª—è –µ—Å—Ç—å
            required = ['sport', 'league', 'match', 'prediction', 'analysis']
            if all(field in data for field in required):
                data['source'] = 'perplexity'
                return data
                
        except Exception as e:
            logger.error(f"Parse error: {e}")
            
        return None
    
    def _generate_quality_fallback(self, sport: str) -> Dict:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π fallback –µ—Å–ª–∏ Perplexity –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª"""
        import random
        
        # –ü–†–ê–í–ò–õ–¨–ù–´–ï —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –ª–∏–≥, –∫–æ–º–∞–Ω–¥ –ò –°–¢–ê–í–û–ö
        teams_data = {
            "football": {
                "sport": "–§—É—Ç–±–æ–ª",
                "bet_types": ["–ü–æ–±–µ–¥–∞ —Ö–æ–∑—è–µ–≤", "–ù–∏—á—å—è", "–ü–æ–±–µ–¥–∞ –≥–æ—Å—Ç–µ–π", "–¢–æ—Ç–∞–ª –±–æ–ª—å—à–µ 2.5", "–¢–æ—Ç–∞–ª –º–µ–Ω—å—à–µ 2.5", "–û–±–µ –∑–∞–±—å—é—Ç"],
                "leagues_teams": {
                    "–ü—Ä–µ–º—å–µ—Ä-–ª–∏–≥–∞": [
                        ("–ú–∞–Ω—á–µ—Å—Ç–µ—Ä –°–∏—Ç–∏", "–õ–∏–≤–µ—Ä–ø—É–ª—å"),
                        ("–ê—Ä—Å–µ–Ω–∞–ª", "–ß–µ–ª—Å–∏"),
                        ("–ú–∞–Ω—á–µ—Å—Ç–µ—Ä –Æ–Ω–∞–π—Ç–µ–¥", "–¢–æ—Ç—Ç–µ–Ω—Ö—ç–º"),
                        ("–ù—å—é–∫–∞—Å–ª", "–ë—Ä–∞–π—Ç–æ–Ω")
                    ],
                    "–õ–∞ –õ–∏–≥–∞": [
                        ("–†–µ–∞–ª –ú–∞–¥—Ä–∏–¥", "–ë–∞—Ä—Å–µ–ª–æ–Ω–∞"),
                        ("–ê—Ç–ª–µ—Ç–∏–∫–æ –ú–∞–¥—Ä–∏–¥", "–°–µ–≤–∏–ª—å—è"),
                        ("–†–µ–∞–ª –°–æ—Å—å–µ–¥–∞–¥", "–ë–µ—Ç–∏—Å"),
                        ("–í–∏–ª—å—è—Ä—Ä–µ–∞–ª", "–í–∞–ª–µ–Ω—Å–∏—è")
                    ],
                    "–°–µ—Ä–∏—è –ê": [
                        ("–Æ–≤–µ–Ω—Ç—É—Å", "–ú–∏–ª–∞–Ω"),
                        ("–ò–Ω—Ç–µ—Ä", "–ù–∞–ø–æ–ª–∏"),
                        ("–†–æ–º–∞", "–õ–∞—Ü–∏–æ"),
                        ("–ê—Ç–∞–ª–∞–Ω—Ç–∞", "–§–∏–æ—Ä–µ–Ω—Ç–∏–Ω–∞")
                    ],
                    "–ë—É–Ω–¥–µ—Å–ª–∏–≥–∞": [
                        ("–ë–∞–≤–∞—Ä–∏—è", "–ë–æ—Ä—É—Å—Å–∏—è –î"),
                        ("–†–ë –õ–µ–π–ø—Ü–∏–≥", "–ë–∞–π–µ—Ä 04"),
                        ("–£–Ω–∏–æ–Ω –ë–µ—Ä–ª–∏–Ω", "–ê–π–Ω—Ç—Ä–∞—Ö—Ç"),
                        ("–§—Ä–∞–π–±—É—Ä–≥", "–í–æ–ª—å—Ñ—Å–±—É—Ä–≥")
                    ]
                }
            },
            "basketball": {
                "sport": "–ë–∞—Å–∫–µ—Ç–±–æ–ª",
                "bet_types": ["–ü–æ–±–µ–¥–∞ —Ö–æ–∑—è–µ–≤", "–ü–æ–±–µ–¥–∞ –≥–æ—Å—Ç–µ–π", "–¢–æ—Ç–∞–ª –±–æ–ª—å—à–µ", "–¢–æ—Ç–∞–ª –º–µ–Ω—å—à–µ", "–§–æ—Ä–∞"],
                "leagues_teams": {
                    "–ù–ë–ê": [
                        ("–õ–µ–π–∫–µ—Ä—Å", "–£–æ—Ä—Ä–∏–æ—Ä–∑"),
                        ("–°–µ–ª—Ç–∏–∫—Å", "–ú–∞–π–∞–º–∏"),
                        ("–ë–∞–∫—Å", "–ù–µ—Ç—Å")
                    ],
                    "–ï–≤—Ä–æ–ª–∏–≥–∞": [
                        ("–¶–°–ö–ê", "–ó–µ–Ω–∏—Ç"),
                        ("–§–µ–Ω–µ—Ä–±–∞—Ö—á–µ", "–†–µ–∞–ª –ú–∞–¥—Ä–∏–¥"),
                        ("–ë–∞—Ä—Å–µ–ª–æ–Ω–∞", "–ú–∏–ª–∞–Ω")
                    ]
                }
            },
            "tennis": {
                "sport": "–¢–µ–Ω–Ω–∏—Å",
                "bet_types": ["–ü–æ–±–µ–¥–∞ –∏–≥—Ä–æ–∫–∞ 1", "–ü–æ–±–µ–¥–∞ –∏–≥—Ä–æ–∫–∞ 2", "–¢–æ—Ç–∞–ª –≥–µ–π–º–æ–≤ –±–æ–ª—å—à–µ", "–¢–æ—Ç–∞–ª –≥–µ–π–º–æ–≤ –º–µ–Ω—å—à–µ"],
                "leagues_teams": {
                    "ATP": [
                        ("–ù–æ–≤–∞–∫ –î–∂–æ–∫–æ–≤–∏—á", "–ö–∞—Ä–ª–æ—Å –ê–ª—å–∫–∞—Ä–∞—Å"),
                        ("–î–∞–Ω–∏–∏–ª –ú–µ–¥–≤–µ–¥–µ–≤", "–Ø–Ω–Ω–∏–∫ –°–∏–Ω–Ω–µ—Ä"),
                        ("–ê–Ω–¥—Ä–µ–π –†—É–±–ª–µ–≤", "–°—Ç–µ—Ñ–∞–Ω–æ—Å –¶–∏—Ü–∏–ø–∞—Å")
                    ],
                    "WTA": [
                        ("–ò–≥–∞ –°–≤—ë–Ω—Ç–µ–∫", "–ê—Ä–∏–Ω–∞ –°–æ–±–æ–ª–µ–Ω–∫–æ"),
                        ("–ö–æ–∫–æ –ì–∞—É—Ñ—Ñ", "–ï–ª–µ–Ω–∞ –†—ã–±–∞–∫–∏–Ω–∞"),
                        ("–î–∂–µ—Å—Å–∏–∫–∞ –ü–µ–≥—É–ª–∞", "–î–∞—Ä—å—è –ö–∞—Å–∞—Ç–∫–∏–Ω–∞")
                    ]
                }
            },
            "hockey": {
                "sport": "–•–æ–∫–∫–µ–π", 
                "bet_types": ["–ü–æ–±–µ–¥–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–µ –≤—Ä–µ–º—è", "–¢–æ—Ç–∞–ª –±–æ–ª—å—à–µ 5.5", "–¢–æ—Ç–∞–ª –º–µ–Ω—å—à–µ 5.5", "–û–±–µ –∑–∞–±—å—é—Ç"],
                "leagues_teams": {
                    "–ù–•–õ": [
                        ("–†–µ–π–Ω–¥–∂–µ—Ä—Å", "–ë—Ä—é–∏–Ω–∑"),
                        ("–õ–∞–π—Ç–Ω–∏–Ω–≥", "–ö–∏–Ω–≥—Å"),
                        ("–û–π–ª–µ—Ä–∑", "–ê–≤–µ–ª–∞–Ω—à")
                    ],
                    "–ö–•–õ": [
                        ("–°–ö–ê", "–¶–°–ö–ê"),
                        ("–î–∏–Ω–∞–º–æ –ú", "–ê–∫ –ë–∞—Ä—Å"),
                        ("–°–∞–ª–∞–≤–∞—Ç", "–ú–µ—Ç–∞–ª–ª—É—Ä–≥ –ú–≥")
                    ]
                }
            }
        }
        
        sport_data = teams_data.get(sport, teams_data["football"])
        
        # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é –ª–∏–≥—É
        league = random.choice(list(sport_data["leagues_teams"].keys()))
        
        # –í—ã–±–∏—Ä–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –¢–û–õ–¨–ö–û –∏–∑ —ç—Ç–æ–π –ª–∏–≥–∏
        team1, team2 = random.choice(sport_data["leagues_teams"][league])
        
        # –í—ã–±–∏—Ä–∞–µ–º –ü–†–ê–í–ò–õ–¨–ù–£–Æ —Å—Ç–∞–≤–∫—É –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Å–ø–æ—Ä—Ç–∞
        prediction = random.choice(sport_data["bet_types"])
        
        return {
            "sport": sport_data["sport"],
            "league": league,
            "match": f"{team1} - {team2}",
            "time": self._generate_match_time(),
            "prediction": prediction,
            "odds": self._generate_realistic_odds(),
            "confidence": random.randint(78, 92),
            "analysis": f"–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –º–∞—Ç—á–∞ {team1} –ø—Ä–æ—Ç–∏–≤ {team2} –≤ —Ä–∞–º–∫–∞—Ö {league}. –î–æ–º–∞—à–Ω—è—è –∫–æ–º–∞–Ω–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω—É—é —Ñ–æ—Ä–º—É –≤ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ç—É—Ä–∞—Ö, –∏–º–µ—è –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ –≤ –∫–ª–∞—Å—Å–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–µ —Ç—Ä–∏–±—É–Ω. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ª–∏—á–Ω—ã—Ö –≤—Å—Ç—Ä–µ—á –∏ —Ç–µ–∫—É—â–∞—è –º–æ—Ç–∏–≤–∞—Ü–∏—è —É–∫–∞–∑—ã–≤–∞—é—Ç –Ω–∞ –≤—ã—Å–æ–∫–∏–µ —à–∞–Ω—Å—ã —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–∞.",
            "key_factors": ["–î–æ–º–∞—à–Ω–µ–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ", "–¢–µ–∫—É—â–∞—è —Ñ–æ—Ä–º–∞ –∫–æ–º–∞–Ω–¥—ã", "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ª–∏—á–Ω—ã—Ö –≤—Å—Ç—Ä–µ—á"],
            "source": "perplexity"
        }
    
    def _determine_prediction(self, betting_data: Dict) -> str:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø –ø—Ä–æ–≥–Ω–æ–∑–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç–∞–≤–æ–∫"""
        insights = betting_data.get("insights", "").lower()
        
        if "–ø–æ–±–µ–¥–∞ —Ö–æ–∑—è–µ–≤" in insights or "–¥–æ–º–∞—à–Ω—è—è –∫–æ–º–∞–Ω–¥–∞" in insights:
            return "–ü–æ–±–µ–¥–∞ —Ö–æ–∑—è–µ–≤"
        elif "–≥–æ—Å—Ç–∏" in insights or "–≤—ã–µ–∑–¥–Ω–∞—è" in insights:
            return "–ü–æ–±–µ–¥–∞ –≥–æ—Å—Ç–µ–π"
        elif "—Ç–æ—Ç–∞–ª –±–æ–ª—å—à–µ" in insights or "–º–Ω–æ–≥–æ –≥–æ–ª–æ–≤" in insights:
            return "–¢–æ—Ç–∞–ª –±–æ–ª—å—à–µ 2.5"
        elif "—Ç–æ—Ç–∞–ª –º–µ–Ω—å—à–µ" in insights or "–º–∞–ª–æ –≥–æ–ª–æ–≤" in insights:
            return "–¢–æ—Ç–∞–ª –º–µ–Ω—å—à–µ 2.5"
        else:
            predictions = ["–ü–æ–±–µ–¥–∞ —Ö–æ–∑—è–µ–≤", "–¢–æ—Ç–∞–ª –±–æ–ª—å—à–µ 2.5", "–û–±–µ –∑–∞–±—å—é—Ç", "–ü–æ–±–µ–¥–∞ –≥–æ—Å—Ç–µ–π"]
            return predictions[0]  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
    
    def _generate_realistic_odds(self) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã"""
        import random
        odds_range = [1.65, 1.85, 2.10, 2.35, 2.60, 2.85]
        return str(random.choice(odds_range))
    
    def _generate_match_time(self):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–µ –≤—Ä–µ–º—è –º–∞—Ç—á–∞"""
        import random
        match_times = [
            "15:00 –ú–°–ö", "17:30 –ú–°–ö", "19:00 –ú–°–ö", "21:45 –ú–°–ö",
            "16:00 –ú–°–ö", "18:30 –ú–°–ö", "20:00 –ú–°–ö", "22:30 –ú–°–ö"
        ]
        return random.choice(match_times)
    
    async def close(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π"""
        await self.perplexity.close_session()

# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
async def demo_perplexity_integration():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Perplexity"""
    api_key = os.getenv('PERPLEXITY_API_KEY')
    if not api_key:
        print("‚ùå PERPLEXITY_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        return
    
    analyzer = EnhancedSportsAnalyzer(api_key)
    
    try:
        print("üîç –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–∞ —á–µ—Ä–µ–∑ Perplexity...")
        prediction = await analyzer.generate_real_prediction("football")
        
        if prediction:
            print(f"‚öΩ –ú–∞—Ç—á: {prediction['match']}")
            print(f"üèÜ –õ–∏–≥–∞: {prediction['league']}")
            print(f"üìà –ü—Ä–æ–≥–Ω–æ–∑: {prediction['prediction']}")
            print(f"üí∞ –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç: {prediction['odds']}")
            print(f"üéØ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {prediction['confidence']}%")
            print(f"üìä –ò—Å—Ç–æ—á–Ω–∏–∫: {prediction['source']}")
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑")
    
    finally:
        await analyzer.close()

if __name__ == "__main__":
    asyncio.run(demo_perplexity_integration())
