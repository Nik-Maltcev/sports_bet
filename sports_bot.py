import asyncio
import logging
from datetime import datetime, time
from typing import List, Dict, Tuple
import pytz
from telegram import Bot
from telegram.ext import Application
import random
import aiohttp
import json
from dataclasses import dataclass
import os
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger
import config  # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

@dataclass
class SportsPrediction:
    """–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–ø–æ—Ä—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–∞"""
    sport: str
    league: str
    match: str
    prediction: str
    odds: str
    confidence: int
    analysis: str
    key_factors: List[str]

class SportsAnalyzer:
    """–ö–ª–∞—Å—Å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã—Ö —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–≥–Ω–æ–∑–æ–≤"""
    
    def __init__(self):
        self.sports_data = {
            "–§—É—Ç–±–æ–ª": {
                "leagues": ["–ü—Ä–µ–º—å–µ—Ä-–ª–∏–≥–∞", "–õ–∞ –õ–∏–≥–∞", "–°–µ—Ä–∏—è –ê", "–ë—É–Ω–¥–µ—Å–ª–∏–≥–∞", "–õ–∏–≥–∞ 1"],
                "bet_types": ["–ü–æ–±–µ–¥–∞ —Ö–æ–∑—è–µ–≤", "–ù–∏—á—å—è", "–ü–æ–±–µ–¥–∞ –≥–æ—Å—Ç–µ–π", "–¢–æ—Ç–∞–ª –±–æ–ª—å—à–µ 2.5", "–¢–æ—Ç–∞–ª –º–µ–Ω—å—à–µ 2.5", "–û–±–µ –∑–∞–±—å—é—Ç"]
            },
            "–ë–∞—Å–∫–µ—Ç–±–æ–ª": {
                "leagues": ["–ù–ë–ê", "–ï–≤—Ä–æ–ª–∏–≥–∞", "–í–¢–ë", "NCAA"],
                "bet_types": ["–ü–æ–±–µ–¥–∞ —Ö–æ–∑—è–µ–≤", "–ü–æ–±–µ–¥–∞ –≥–æ—Å—Ç–µ–π", "–¢–æ—Ç–∞–ª –±–æ–ª—å—à–µ", "–¢–æ—Ç–∞–ª –º–µ–Ω—å—à–µ", "–§–æ—Ä–∞"]
            },
            "–¢–µ–Ω–Ω–∏—Å": {
                "leagues": ["ATP", "WTA", "–ß–µ–ª–ª–µ–Ω–¥–∂–µ—Ä", "ITF"],
                "bet_types": ["–ü–æ–±–µ–¥–∞ –∏–≥—Ä–æ–∫–∞ 1", "–ü–æ–±–µ–¥–∞ –∏–≥—Ä–æ–∫–∞ 2", "–¢–æ—Ç–∞–ª –≥–µ–π–º–æ–≤ –±–æ–ª—å—à–µ", "–¢–æ—Ç–∞–ª –≥–µ–π–º–æ–≤ –º–µ–Ω—å—à–µ"]
            },
            "–•–æ–∫–∫–µ–π": {
                "leagues": ["–ù–•–õ", "–ö–•–õ", "SHL", "DEL"],
                "bet_types": ["–ü–æ–±–µ–¥–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–µ –≤—Ä–µ–º—è", "–¢–æ—Ç–∞–ª –±–æ–ª—å—à–µ 5.5", "–¢–æ—Ç–∞–ª –º–µ–Ω—å—à–µ 5.5", "–û–±–µ –∑–∞–±—å—é—Ç"]
            }
        }
        
        self.analysis_templates = [
            "üîç **–î–ï–¢–ê–õ–¨–ù–´–ô –°–¢–ê–¢–ò–°–¢–ò–ß–ï–°–ö–ò–ô –ê–ù–ê–õ–ò–ó:**",
            "üìä **–≠–ö–°–ü–ï–†–¢–ù–ê–Ø –û–¶–ï–ù–ö–ê –ù–ê –û–°–ù–û–í–ï –î–ê–ù–ù–´–•:**",
            "üéØ **–ü–†–û–§–ï–°–°–ò–û–ù–ê–õ–¨–ù–´–ô –ü–†–û–ì–ù–û–ó:**",
            "üí° **–ê–ù–ê–õ–ò–¢–ò–ß–ï–°–ö–ò–ô –û–ë–ó–û–†:**",
            "üß† **–¢–ê–ö–¢–ò–ß–ï–°–ö–ò–ô –ê–ù–ê–õ–ò–ó –≠–ö–°–ü–ï–†–¢–û–í:**"
        ]
        
        self.key_factors_pool = [
            "–ë–µ–∑—É–ø—Ä–µ—á–Ω–∞—è –¥–æ–º–∞—à–Ω—è—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (8 –ø–æ–±–µ–¥ –∏–∑ 10)",
            "–û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –∫–ª—é—á–µ–≤—ã—Ö –∏–≥—Ä–æ–∫–æ–≤ –≤ —Å–æ—Å—Ç–∞–≤–µ —Å–æ–ø–µ—Ä–Ω–∏–∫–∞", 
            "–í—ã—Å–æ–∫–∞—è –º–æ—Ç–∏–≤–∞—Ü–∏—è –≤ –±–æ—Ä—å–±–µ –∑–∞ –µ–≤—Ä–æ–∫—É–±–∫–∏",
            "–î–æ–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –æ—á–Ω—ã—Ö –≤—Å—Ç—Ä–µ—á–∞—Ö (4 –ø–æ–±–µ–¥—ã –∏–∑ 5)",
            "–û—Ç–ª–∏—á–Ω–∞—è —Ñ–æ—Ä–º–∞: 4 –ø–æ–±–µ–¥—ã –≤ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 5 –º–∞—Ç—á–∞—Ö",
            "–¢–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å—Ö–µ–º–µ",
            "–°–∏–ª—å–Ω—ã–π –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –Ω–∞—Å—Ç—Ä–æ–π –∫–æ–º–∞–Ω–¥—ã",
            "–ò–¥–µ–∞–ª—å–Ω—ã–µ –ø–æ–≥–æ–¥–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –¥–ª—è —Å—Ç–∏–ª—è –∏–≥—Ä—ã",
            "–ü–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–π –æ—Ç–¥—ã—Ö –º–µ–∂–¥—É –≤–∞–∂–Ω—ã–º–∏ –º–∞—Ç—á–∞–º–∏",
            "–ü—Ä–µ–≤–æ—Å—Ö–æ–¥–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –º–æ–º–µ–Ω—Ç–æ–≤"
        ]
        
        self.professional_insights = [
            "–ü–æ –¥–∞–Ω–Ω—ã–º –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Å–ª—É–∂–±, –∫–æ–º–∞–Ω–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω—É—é —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å",
            "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ xG (Expected Goals) —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ —Å–µ—Ä—å–µ–∑–Ω–æ–µ –ø—Ä–µ–≤–æ—Å—Ö–æ–¥—Å—Ç–≤–æ",
            "–¢–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –≤—ã—è–≤–∏–ª –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Å–ª–∞–±–æ—Å—Ç–∏ –≤ –æ–±–æ—Ä–æ–Ω–µ —Å–æ–ø–µ—Ä–Ω–∏–∫–∞", 
            "–ú–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–∫—Ç–æ—Ä –∏–≥—Ä–∞–µ—Ç —Ä–µ—à–∞—é—â—É—é —Ä–æ–ª—å –≤ –¥–∞–Ω–Ω–æ–º –ø—Ä–æ—Ç–∏–≤–æ—Å—Ç–æ—è–Ω–∏–∏",
            "–§–∏–∑–∏—á–µ—Å–∫–∞—è –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫–æ–º–∞–Ω–¥—ã –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ –ø–∏–∫–æ–≤–æ–º —É—Ä–æ–≤–Ω–µ",
            "–ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –ø–æ–±–µ–¥ –æ—á–µ–≤–∏–¥–Ω–æ",
            "–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –±—É–∫–º–µ–∫–µ—Ä–æ–≤ –Ω–µ–¥–æ–æ—Ü–µ–Ω–∏–≤–∞—é—Ç —Ä–µ–∞–ª—å–Ω—ã–µ —à–∞–Ω—Å—ã —Ñ–∞–≤–æ—Ä–∏—Ç–∞",
            "–ì–ª—É–±–∏–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —á–µ—Ç–∫–∏–µ —Ç–µ–Ω–¥–µ–Ω—Ü–∏–∏ –∫ –¥–∞–Ω–Ω–æ–º—É –∏—Å—Ö–æ–¥—É"
        ]

    def generate_realistic_match(self, sport: str, league: str) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞—Ç—á–∞"""
        teams = {
            "–§—É—Ç–±–æ–ª": ["–ú–∞–Ω—á–µ—Å—Ç–µ—Ä –°–∏—Ç–∏", "–õ–∏–≤–µ—Ä–ø—É–ª—å", "–ß–µ–ª—Å–∏", "–ê—Ä—Å–µ–Ω–∞–ª", "–ë–∞—Ä—Å–µ–ª–æ–Ω–∞", "–†–µ–∞–ª –ú–∞–¥—Ä–∏–¥", 
                      "–ü–°–ñ", "–ë–∞–≤–∞—Ä–∏—è", "–Æ–≤–µ–Ω—Ç—É—Å", "–ú–∏–ª–∞–Ω", "–ò–Ω—Ç–µ—Ä", "–ù–∞–ø–æ–ª–∏"],
            "–ë–∞—Å–∫–µ—Ç–±–æ–ª": ["–õ–µ–π–∫–µ—Ä—Å", "–£–æ—Ä—Ä–∏–æ—Ä–∑", "–°–µ–ª—Ç–∏–∫—Å", "–ù–µ—Ç—Å", "–¶–°–ö–ê", "–ó–µ–Ω–∏—Ç", "–•–∏–º–∫–∏", "–õ–æ–∫–æ–º–æ—Ç–∏–≤"],
            "–¢–µ–Ω–Ω–∏—Å": ["–ù–æ–≤–∞–∫ –î–∂–æ–∫–æ–≤–∏—á", "–†–∞—Ñ–∞—ç–ª—å –ù–∞–¥–∞–ª—å", "–†–æ–¥–∂–µ—Ä –§–µ–¥–µ—Ä–µ—Ä", "–î–∞–Ω–∏–∏–ª –ú–µ–¥–≤–µ–¥–µ–≤", 
                      "–ê—Ä–∏–Ω–∞ –°–æ–±–æ–ª–µ–Ω–∫–æ", "–ò–≥–∞ –°–≤—ë–Ω—Ç–µ–∫"],
            "–•–æ–∫–∫–µ–π": ["–†–µ–π–Ω–¥–∂–µ—Ä—Å", "–ë—Ä—é–∏–Ω–∑", "–°–ö–ê", "–¶–°–ö–ê", "–î–∏–Ω–∞–º–æ –ú", "–ê–∫ –ë–∞—Ä—Å"]
        }
        
        sport_teams = teams.get(sport, ["–ö–æ–º–∞–Ω–¥–∞ –ê", "–ö–æ–º–∞–Ω–¥–∞ –ë"])
        
        if sport == "–¢–µ–Ω–Ω–∏—Å":
            return f"{random.choice(sport_teams)} - {random.choice(sport_teams)}"
        else:
            team1, team2 = random.sample(sport_teams, 2)
            return f"{team1} - {team2}"

    def generate_analysis(self, sport: str, prediction: str) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑"""
        insight = random.choice(self.professional_insights)
        
        # –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≤–∏–¥–∞ —Å–ø–æ—Ä—Ç–∞
        sport_analyses = {
            "–§—É—Ç–±–æ–ª": [
                f"{insight}. –ö–æ–º–∞–Ω–¥–∞ –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –ø—Ä–µ–≤–æ—Å—Ö–æ–¥–Ω—É—é –∏–≥—Ä—É –≤ –∞—Ç–∞–∫–µ, —Å–æ–∑–¥–∞–≤–∞—è –≤ —Å—Ä–µ–¥–Ω–µ–º 2.3 –±–æ–ª—å—à–∏—Ö –º–æ–º–µ–Ω—Ç–∞ –∑–∞ –º–∞—Ç—á. –û–±–æ—Ä–æ–Ω–∞ —Å–æ–ø–µ—Ä–Ω–∏–∫–∞ –ø—Ä–æ–ø—É—Å–∫–∞–µ—Ç –≥–æ–ª—ã –≤ 73% –¥–æ–º–∞—à–Ω–∏—Ö –∏–≥—Ä.",
                f"{insight}. –¢–∞–∫—Ç–∏—á–µ—Å–∫–∞—è —Å—Ö–µ–º–∞ 4-3-3 –ø–æ–∑–≤–æ–ª—è–µ—Ç –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä–æ–≤–∞—Ç—å —Ü–µ–Ω—Ç—Ä –ø–æ–ª—è –∏ —Å–æ–∑–¥–∞–≤–∞—Ç—å —á–∏—Å–ª–µ–Ω–Ω–æ–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ –Ω–∞ —Ñ–ª–∞–Ω–≥–∞—Ö. –°–æ–ø–µ—Ä–Ω–∏–∫ –∏—Å–ø—ã—Ç—ã–≤–∞–µ—Ç –ø—Ä–æ–±–ª–µ–º—ã –ø—Ä–æ—Ç–∏–≤ –≤—ã—Å–æ–∫–æ–≥–æ –ø—Ä–µ—Å—Å–∏–Ω–≥–∞.",
                f"{insight}. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–ª–∞–¥–µ–Ω–∏—è –º—è—á–æ–º (64% –≤ —Å—Ä–µ–¥–Ω–µ–º) –∏ —Ç–æ—á–Ω–æ—Å—Ç—å –ø–µ—Ä–µ–¥–∞—á (87%) —É–∫–∞–∑—ã–≤–∞—é—Ç –Ω–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –ø—Ä–µ–≤–æ—Å—Ö–æ–¥—Å—Ç–≤–æ. –ö–ª—é—á–µ–≤–æ–π –ø–ª–µ–π–º–µ–π–∫–µ—Ä –≤ –æ—Ç–ª–∏—á–Ω–æ–π —Ñ–æ—Ä–º–µ.",
                f"{insight}. –ê–Ω–∞–ª–∏–∑ —É–¥–∞—Ä–æ–≤ –ø–æ –≤–æ—Ä–æ—Ç–∞–º –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç 5.2 —É–¥–∞—Ä–∞ –≤ —Å—Ç–≤–æ—Ä –∑–∞ –∏–≥—Ä—É –ø—Ä–æ—Ç–∏–≤ 2.8 —É —Å–æ–ø–µ—Ä–Ω–∏–∫–∞. –ì–æ–ª–∫–∏–ø–µ—Ä –∫–æ–º–∞–Ω–¥—ã –ø—Ä–æ–ø—É—Å—Ç–∏–ª —Ç–æ–ª—å–∫–æ 1 –≥–æ–ª –≤ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 4 –º–∞—Ç—á–∞—Ö."
            ],
            "–ë–∞—Å–∫–µ—Ç–±–æ–ª": [
                f"{insight}. –ö–æ–º–∞–Ω–¥–∞ –Ω–∞–±–∏—Ä–∞–µ—Ç –≤ —Å—Ä–µ–¥–Ω–µ–º 112.4 –æ—á–∫–∞ –∑–∞ –∏–≥—Ä—É, —á—Ç–æ –Ω–∞ 8 –æ—á–∫–æ–≤ –≤—ã—à–µ –ª–∏–≥–æ–≤–æ–≥–æ —Å—Ä–µ–¥–Ω–µ–≥–æ. –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –±—Ä–æ—Å–∫–æ–≤ —Å –∏–≥—Ä—ã —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç 48.2%.",
                f"{insight}. –î–æ–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –ø–æ–¥–±–æ—Ä–∞—Ö (52.3 –ø—Ä–æ—Ç–∏–≤ 44.1) –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–ª–∞–¥–µ–Ω–∏—è. –ë—ã—Å—Ç—Ä—ã–µ –∞—Ç–∞–∫–∏ –ø—Ä–∏–Ω–æ—Å—è—Ç 18.7 –æ—á–∫–æ–≤ –∑–∞ –º–∞—Ç—á.",
                f"{insight}. –ì–ª—É–±–∏–Ω–∞ —Å–∫–∞–º–µ–π–∫–∏ –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –≤—ã—Å–æ–∫–∏–π —Ç–µ–º–ø –≤—Å—é –∏–≥—Ä—É. –†–µ–∑–µ—Ä–≤—ã –¥–æ–±–∞–≤–ª—è—é—Ç 35.8 –æ—á–∫–æ–≤ –ø—Ä–∏ 44% —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –±—Ä–æ—Å–∫–æ–≤.",
                f"{insight}. –û–±–æ—Ä–æ–Ω–∏—Ç–µ–ª—å–Ω–∞—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å 106.2 –ø—É–Ω–∫—Ç–∞ –Ω–∞ 100 –≤–ª–∞–¥–µ–Ω–∏–π - –ª—É—á—à–∏–π –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å –≤ –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏. –°–æ–ø–µ—Ä–Ω–∏–∫ —Ç–µ—Ä—è–µ—Ç 16.4 –º—è—á–∞ –∑–∞ –∏–≥—Ä—É."
            ],
            "–¢–µ–Ω–Ω–∏—Å": [
                f"{insight}. –ù–∞ –¥–∞–Ω–Ω–æ–º –ø–æ–∫—Ä—ã—Ç–∏–∏ –∏–≥—Ä–æ–∫ –≤—ã–∏–≥—Ä—ã–≤–∞–µ—Ç 76% –º–∞—Ç—á–µ–π –∏ 68% –≥–µ–π–º–æ–≤ –Ω–∞ —Å–≤–æ–µ–π –ø–æ–¥–∞—á–µ. –ü—Ä–æ—Ü–µ–Ω—Ç —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –±—Ä–µ–π–∫-–ø–æ–π–Ω—Ç–æ–≤ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç 42%.",
                f"{insight}. –§–∏–∑–∏—á–µ—Å–∫–∞—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å —Å—Ç–∞–±–∏–ª—å–Ω—É—é –∏–≥—Ä—É –≤ –¥–ª–∏–Ω–Ω—ã—Ö –º–∞—Ç—á–∞—Ö. –í —Ä–µ—à–∞—é—â–∏—Ö —Å–µ—Ç–∞—Ö —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–±–µ–¥ 78%.",
                f"{insight}. –¢–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –ø–ª–∞–Ω –ø—Ä–æ—Ç–∏–≤ —Å–æ–ø–µ—Ä–Ω–∏–∫–∞ –æ–ø—Ä–æ–±–æ–≤–∞–Ω –≤ 3 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –≤—Å—Ç—Ä–µ—á–∞—Ö —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º 2-1. –°–ª–∞–±–∞—è —Å—Ç–æ—Ä–æ–Ω–∞ - —É–∫–æ—Ä–æ—á–µ–Ω–Ω—ã–µ –º—è—á–∏ –≤ —Ü–µ–Ω—Ç—Ä –∫–æ—Ä—Ç–∞.",
                f"{insight}. –ú–µ–Ω—Ç–∞–ª—å–Ω–∞—è —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å –ø—Ä–æ—è–≤–ª—è–µ—Ç—Å—è –≤ –º–∞—Ç—á–∞—Ö –Ω–∞ —Ç—É—Ä–Ω–∏—Ä–∞—Ö –≤—ã—Å–æ–∫–æ–≥–æ —Ä–∞–Ω–≥–∞. –ü—Ä–æ—Ü–µ–Ω—Ç –≤—ã–∏–≥—Ä–∞–Ω–Ω—ã—Ö —Ç–∞–π-–±—Ä–µ–π–∫–æ–≤ –¥–æ—Å—Ç–∏–≥–∞–µ—Ç 71%."
            ],
            "–•–æ–∫–∫–µ–π": [
                f"{insight}. –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∏–≥—Ä—ã –≤ –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–µ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç 23.8% –ø—Ä–∏ —Å—Ä–µ–¥–Ω–µ–º –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ –ª–∏–≥–∏ 19.2%. –í –º–µ–Ω—å—à–∏–Ω—Å—Ç–≤–µ –∫–æ–º–∞–Ω–¥–∞ –ø—Ä–æ–ø—É—Å–∫–∞–µ—Ç —Ç–æ–ª—å–∫–æ 15.6% —à–∞–π–±.",
                f"{insight}. –ì–æ–ª–∫–∏–ø–µ—Ä –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏ 0.924 –∏ –ø—Ä–æ–ø—É—Å–∫–∞–µ—Ç 2.31 —à–∞–π–±—ã –∑–∞ –∏–≥—Ä—É. –í –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 7 –∏–≥—Ä–∞—Ö - 5 –ø–æ–±–µ–¥.",
                f"{insight}. –°–∫–æ—Ä–æ—Å—Ç—å –∞—Ç–∞–∫ –∏ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π –ø—Ä–µ—Å—Å–∏–Ω–≥ –ø—Ä–∏–Ω–æ—Å—è—Ç 3.4 –≥–æ–ª–∞ –≤ —Å—Ä–µ–¥–Ω–µ–º –∑–∞ –º–∞—Ç—á. –ü–µ—Ä–≤–æ–µ –∑–≤–µ–Ω–æ –Ω–∞–±–∏—Ä–∞–µ—Ç 58% –≤—Å–µ—Ö –æ—á–∫–æ–≤ –∫–æ–º–∞–Ω–¥—ã.",
                f"{insight}. –î–æ–º–∞—à–Ω—è—è –∞—Ä–µ–Ω–∞ –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç —Å–µ—Ä—å–µ–∑–Ω–æ–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ: 82% –ø–æ–±–µ–¥ –≤ —Ä–µ–≥—É–ª—è—Ä–∫–µ –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∞ 18,000 –±–æ–ª–µ–ª—å—â–∏–∫–æ–≤."
            ]
        }
        
        base_analysis = random.choice(sport_analyses.get(sport, [f"{insight}. –ê–Ω–∞–ª–∏–∑ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—ã—Å–æ–∫—É—é –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω–æ–≥–æ –∏—Å—Ö–æ–¥–∞."]))
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–∫–ª—é—á–µ–Ω–∏–µ
        conclusions = [
            "–í—Å–µ —Ñ–∞–∫—Ç–æ—Ä—ã —É–∫–∞–∑—ã–≤–∞—é—Ç –Ω–∞ –≤—ã—Å–æ–∫—É—é –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —É—Å–ø–µ—Ö–∞ –¥–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–∞.",
            "–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –æ–±–æ—Å–Ω–æ–≤–∞–Ω–Ω–æ—Å—Ç—å –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å—Ç–∞–≤–∫–∏.",
            "–°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –∏ —ç–∫—Å–ø–µ—Ä—Ç–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ —Å–æ–≤–ø–∞–¥–∞—é—Ç –≤ –ø–æ–ª—å–∑—É –ø—Ä–æ–≥–Ω–æ–∑–∞.",
            "–¢–µ–∫—É—â–∞—è —Å–∏—Ç—É–∞—Ü–∏—è —Å–æ–∑–¥–∞–µ—Ç –∏–¥–µ–∞–ª—å–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –¥–ª—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ —Å—Ü–µ–Ω–∞—Ä–∏—è."
        ]
        
        return f"{base_analysis} {random.choice(conclusions)}"

    def generate_prediction(self) -> SportsPrediction:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ–¥–∏–Ω –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑"""
        sport = random.choice(list(self.sports_data.keys()))
        sport_info = self.sports_data[sport]
        league = random.choice(sport_info["leagues"])
        bet_type = random.choice(sport_info["bet_types"])
        match = self.generate_realistic_match(sport, league)
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤
        odds_values = [1.45, 1.65, 1.85, 2.10, 2.35, 2.60, 2.85, 3.20]
        odds = random.choice(odds_values)
        
        # –£—Ä–æ–≤–µ–Ω—å —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
        confidence = random.randint(75, 95)
        
        # –ê–Ω–∞–ª–∏–∑
        analysis = self.generate_analysis(sport, bet_type)
        
        # –ö–ª—é—á–µ–≤—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã
        key_factors = random.sample(self.key_factors_pool, 3)
        
        return SportsPrediction(
            sport=sport,
            league=league,
            match=match,
            prediction=bet_type,
            odds=str(odds),
            confidence=confidence,
            analysis=analysis,
            key_factors=key_factors
        )

    def generate_daily_predictions(self, count: int = 3) -> List[SportsPrediction]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ –Ω–∞ –¥–µ–Ω—å"""
        predictions = []
        used_sports = set()
        
        for _ in range(count):
            # –°—Ç–∞—Ä–∞–µ–º—Å—è –Ω–µ –ø–æ–≤—Ç–æ—Ä—è—Ç—å –≤–∏–¥—ã —Å–ø–æ—Ä—Ç–∞
            attempts = 0
            while attempts < 10:
                prediction = self.generate_prediction()
                if prediction.sport not in used_sports or len(used_sports) >= len(self.sports_data):
                    predictions.append(prediction)
                    used_sports.add(prediction.sport)
                    break
                attempts += 1
            
            if attempts >= 10:  # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —Å–ø–æ—Ä—Ç
                predictions.append(self.generate_prediction())
        
        return predictions

class TelegramSportsBot:
    """–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç–∞ –¥–ª—è —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–≥–Ω–æ–∑–æ–≤"""
    
    def __init__(self, token: str, channel_id: str):
        self.token = token
        self.channel_id = channel_id
        self.analyzer = SportsAnalyzer()
        self.bot = Bot(token=token)
        self.scheduler = AsyncIOScheduler(timezone=pytz.timezone('Europe/Moscow'))
        
    def format_prediction_message(self, predictions: List[SportsPrediction]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ–±—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ–≥–Ω–æ–∑–∞–º–∏ (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)"""
        moscow_tz = pytz.timezone('Europe/Moscow')
        current_time = datetime.now(moscow_tz)
        date_str = current_time.strftime("%d.%m.%Y")
        time_str = current_time.strftime("%H:%M")
        
        message = f"üèÜ **–≠–ö–°–ü–ï–†–¢–ù–´–ï –°–ü–û–†–¢–ò–í–ù–´–ï –ü–†–û–ì–ù–û–ó–´** üèÜ\n"
        message += f"üìÖ {date_str} | üïò {time_str} –ú–°–ö\n\n"
        message += "ÔøΩ *–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏*\n"
        message += "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
        
        for i, pred in enumerate(predictions, 1):
            # –≠–º–æ–¥–∑–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –≤–∏–¥–æ–≤ —Å–ø–æ—Ä—Ç–∞
            sport_emoji = {
                "–§—É—Ç–±–æ–ª": "‚öΩ",
                "–ë–∞—Å–∫–µ—Ç–±–æ–ª": "üèÄ", 
                "–¢–µ–Ω–Ω–∏—Å": "üéæ",
                "–•–æ–∫–∫–µ–π": "üèí"
            }
            
            emoji = sport_emoji.get(pred.sport, "üèÜ")
            
            # –†–µ–π—Ç–∏–Ω–≥ –Ω–∞ –æ—Å–Ω–æ–≤–µ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
            if pred.confidence >= 85:
                rating = "üåüüåüüåü –í–´–°–û–ö–ò–ô"
            elif pred.confidence >= 70:
                rating = "üåüüåü –°–†–ï–î–ù–ò–ô"
            else:
                rating = "üåü –û–°–¢–û–†–û–ñ–ù–û"
            
            message += f"üèÜ **–ü–†–û–ì–ù–û–ó #{i}** üìà\n"
            message += f"üèüÔ∏è {pred.sport} ‚Ä¢ {pred.league}\n"
            message += f"‚öîÔ∏è {pred.match}\n"
            message += f"üìà **–ü—Ä–æ–≥–Ω–æ–∑:** {pred.prediction}\n"
            message += f"üí∞ **–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç:** {pred.odds}\n"
            message += f"üìà **–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å:** {pred.confidence}%\n\n"
            message += f"‚≠êÔ∏è **–†–µ–π—Ç–∏–Ω–≥:** {rating}\n\n"
            
            message += f"üìã **–≠–∫—Å–ø–µ—Ä—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑:**\n{pred.analysis}\n\n"
            
            message += f"üîë **–ö–ª—é—á–µ–≤—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã:**\n"
            for j, factor in enumerate(pred.key_factors, 1):
                message += f"{j}. {factor}\n"
            
            if i < len(predictions):
                message += "\n‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n\n"
        
        message += "\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
        message += "üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–æ—á–Ω–æ—Å—Ç–∏:** 78% –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü\n"
        message += "‚ö†Ô∏è **–í–∞–∂–Ω–æ:** –°—Ç–∞–≤–∫–∏ —Å–≤—è–∑–∞–Ω—ã —Å —Ä–∏—Å–∫–∞–º–∏. –ò–≥—Ä–∞–π—Ç–µ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ!\n"
        message += "üçÄ **–£–¥–∞—á–Ω—ã—Ö —Å—Ç–∞–≤–æ–∫!**\n\n"
        message += f"ü§ñ *–ü—Ä–æ–≥–Ω–æ–∑—ã —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã: {time_str} –ú–°–ö*"
        
        return message

    def format_single_prediction(self, pred: SportsPrediction, index: int) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ–¥–∏–Ω–æ—á–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑ –¥–ª—è –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        moscow_tz = pytz.timezone('Europe/Moscow')
        current_time = datetime.now(moscow_tz)
        date_str = current_time.strftime("%d.%m.%Y")
        time_str = current_time.strftime("%H:%M")
        
        # –≠–º–æ–¥–∑–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –≤–∏–¥–æ–≤ —Å–ø–æ—Ä—Ç–∞
        sport_emoji = {
            "–§—É—Ç–±–æ–ª": "‚öΩ",
            "–ë–∞—Å–∫–µ—Ç–±–æ–ª": "üèÄ", 
            "–¢–µ–Ω–Ω–∏—Å": "üéæ",
            "–•–æ–∫–∫–µ–π": "üèí"
        }
        
        emoji = sport_emoji.get(pred.sport, "üèÜ")
        
        # –†–µ–π—Ç–∏–Ω–≥ –Ω–∞ –æ—Å–Ω–æ–≤–µ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
        if pred.confidence >= 85:
            rating = "üåüüåüüåü –í–´–°–û–ö–ò–ô"
            confidence_emoji = "üî•"
        elif pred.confidence >= 70:
            rating = "üåüüåü –°–†–ï–î–ù–ò–ô" 
            confidence_emoji = "üí™"
        else:
            rating = "üåü –û–°–¢–û–†–û–ñ–ù–û"
            confidence_emoji = "‚ö†Ô∏è"
        
        message = f"üèÜ **–≠–ö–°–ü–ï–†–¢–ù–´–ô –ü–†–û–ì–ù–û–ó #{index}** {confidence_emoji}\n"
        message += f"üìÖ {date_str} | üïò {time_str} –ú–°–ö\n\n"
        
        message += f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
        
        message += f"üèüÔ∏è **{emoji} {pred.sport}** ‚Ä¢ {pred.league}\n"
        message += f"‚öîÔ∏è **{pred.match}**\n\n"
        
        message += f"üìà **–ü–†–û–ì–ù–û–ó:** `{pred.prediction}`\n"
        message += f"üí∞ **–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç:** `{pred.odds}`\n"
        message += f"üéØ **–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å:** `{pred.confidence}%`\n"
        message += f"‚≠êÔ∏è **–†–µ–π—Ç–∏–Ω–≥:** {rating}\n\n"
        
        message += f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
        
        message += f"üìã **–ü–†–û–§–ï–°–°–ò–û–ù–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó:**\n\n"
        message += f"_{pred.analysis}_\n\n"
        
        message += f"üîë **–ö–õ–Æ–ß–ï–í–´–ï –§–ê–ö–¢–û–†–´:**\n"
        for j, factor in enumerate(pred.key_factors, 1):
            message += f"`{j}.` {factor}\n"
        
        message += f"\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
        message += f"üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–æ—á–Ω–æ—Å—Ç–∏: 78% –∑–∞ –º–µ—Å—è—Ü*\n"
        message += f"‚ö†Ô∏è *–ü–æ–º–Ω–∏—Ç–µ: —Å—Ç–∞–≤–∫–∏ —Å–≤—è–∑–∞–Ω—ã —Å —Ä–∏—Å–∫–∞–º–∏*\n"
        message += f"üçÄ *–£–¥–∞—á–Ω—ã—Ö —Å—Ç–∞–≤–æ–∫!*\n\n"
        message += f"ü§ñ *–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ: {time_str} –ú–°–ö*"
        
        return message

    async def send_daily_predictions(self):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –ø—Ä–æ–≥–Ω–æ–∑—ã –≤ –∫–∞–Ω–∞–ª –æ—Ç–¥–µ–ª—å–Ω—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏"""
        try:
            logger.info("üöÄ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–≥–Ω–æ–∑–æ–≤...")
            predictions = self.analyzer.generate_daily_predictions(3)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            moscow_tz = pytz.timezone('Europe/Moscow')
            current_time = datetime.now(moscow_tz)
            date_str = current_time.strftime("%d.%m.%Y")
            time_str = current_time.strftime("%H:%M")
            
            header_message = f"üî• **–≠–ö–°–ü–ï–†–¢–ù–´–ï –°–ü–û–†–¢–ò–í–ù–´–ï –ü–†–û–ì–ù–û–ó–´** üî•\n"
            header_message += f"üìÖ **{date_str}** | üïò **{time_str} –ú–°–ö**\n\n"
            header_message += f"üéØ **–°–µ–≥–æ–¥–Ω—è —É –Ω–∞—Å {len(predictions)} —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã—Ö –ø—Ä–æ–≥–Ω–æ–∑–∞**\n"
            header_message += f"üìä *–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –æ—Ç —Ç–æ–ø-—ç–∫—Å–ø–µ—Ä—Ç–æ–≤*\n"
            header_message += f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
            header_message += f"üí° *–ö–∞–∂–¥—ã–π –ø—Ä–æ–≥–Ω–æ–∑ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º*\n"
            header_message += f"‚è∞ *–°–ª–µ–¥–∏—Ç–µ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –º–∏–Ω—É—Ç*"
            
            await self.bot.send_message(
                chat_id=self.channel_id,
                text=header_message,
                parse_mode='Markdown'
            )
            
            logger.info("üì§ –ó–∞–≥–æ–ª–æ–≤–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
            
            # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –ø—Ä–æ–≥–Ω–æ–∑–æ–≤
            await asyncio.sleep(3)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥—ã–π –ø—Ä–æ–≥–Ω–æ–∑ –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
            for i, prediction in enumerate(predictions, 1):
                try:
                    message = self.format_single_prediction(prediction, i)
                    
                    await self.bot.send_message(
                        chat_id=self.channel_id,
                        text=message,
                        parse_mode='Markdown'
                    )
                    
                    logger.info(f"‚úÖ –ü—Ä–æ–≥–Ω–æ–∑ #{i} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: {prediction.match}")
                    
                    # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è —Å–ø–∞–º–∞
                    if i < len(predictions):
                        await asyncio.sleep(2)
                        
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞ #{i}: {e}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            footer_message = f"üéâ **–í–°–ï –ü–†–û–ì–ù–û–ó–´ –û–¢–ü–†–ê–í–õ–ï–ù–´!** üéâ\n\n"
            footer_message += f"üìä **–ò—Ç–æ–≥–æ:** {len(predictions)} —ç–∫—Å–ø–µ—Ä—Ç–Ω—ã—Ö –ø—Ä–æ–≥–Ω–æ–∑–∞\n"
            footer_message += f"üéØ **–°—Ä–µ–¥–Ω—è—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å:** {sum(p.confidence for p in predictions) // len(predictions)}%\n\n"
            footer_message += f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
            footer_message += f"‚ö†Ô∏è **–í–∞–∂–Ω–æ:** –ò–≥—Ä–∞–π—Ç–µ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ!\n"
            footer_message += f"üí∞ **–ù–µ —Å—Ç–∞–≤—å—Ç–µ –±–æ–ª—å—à–µ, —á–µ–º –º–æ–∂–µ—Ç–µ –ø–æ–∑–≤–æ–ª–∏—Ç—å**\n"
            footer_message += f"üçÄ **–£–¥–∞—á–Ω—ã—Ö —Å—Ç–∞–≤–æ–∫!**\n\n"
            footer_message += f"üìà *–°–ª–µ–¥—É—é—â–∏–µ –ø—Ä–æ–≥–Ω–æ–∑—ã: –∑–∞–≤—Ç—Ä–∞ –≤ 9:25 –ú–°–ö*"
            
            await asyncio.sleep(3)
            await self.bot.send_message(
                chat_id=self.channel_id,
                text=footer_message,
                parse_mode='Markdown'
            )
            
            logger.info("üéØ –í—Å–µ –ø—Ä–æ–≥–Ω–æ–∑—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã!")
            
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤: {e}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            try:
                error_message = f"üö® **–¢–ï–•–ù–ò–ß–ï–°–ö–ò–ï –ü–†–û–ë–õ–ï–ú–´**\n\n"
                error_message += f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤.\n"
                error_message += f"–ú—ã —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ–º –ø—Ä–æ–±–ª–µ–º—ã.\n\n"
                error_message += f"‚è∞ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç."
                
                await self.bot.send_message(
                    chat_id=self.channel_id,
                    text=error_message,
                    parse_mode='Markdown'
                )
            except:
                logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ")

    async def start_scheduler(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ –≤ 9:00 –ú–°–ö"""
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –Ω–∞ 9:00 –ø–æ –º–æ—Å–∫–æ–≤—Å–∫–æ–º—É –≤—Ä–µ–º–µ–Ω–∏
        self.scheduler.add_job(
            self.send_daily_predictions,
            CronTrigger(hour=9, minute=0, timezone=pytz.timezone('Europe/Moscow')),
            id='daily_predictions'
        )
        
        # –¢–∞–∫–∂–µ –¥–æ–±–∞–≤–∏–º —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞–¥–∞—á—É –Ω–∞ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ (–∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–æ)
        # self.scheduler.add_job(
        #     self.send_daily_predictions,
        #     CronTrigger(minute='*'),
        #     id='test_predictions'
        # )
        
        self.scheduler.start()
        logger.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω. –ü—Ä–æ–≥–Ω–æ–∑—ã –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –≤ 9:00 –ú–°–ö")

    async def test_send(self):
        """–¢–µ—Å—Ç–æ–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤"""
        await self.send_daily_predictions()

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏ ID –∫–∞–Ω–∞–ª–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
    CHANNEL_ID = os.getenv('TELEGRAM_CHANNEL_ID')
    
    if not BOT_TOKEN or not CHANNEL_ID:
        logger.error("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è TELEGRAM_BOT_TOKEN –∏ TELEGRAM_CHANNEL_ID")
        return
    
    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
    sports_bot = TelegramSportsBot(BOT_TOKEN, CHANNEL_ID)
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
        await sports_bot.start_scheduler()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –ø—Ä–æ–≥–Ω–æ–∑—ã —Å—Ä–∞–∑—É (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        # await sports_bot.test_send()
        
        logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç...")
        
        # –î–µ—Ä–∂–∏–º –ø—Ä–æ–≥—Ä–∞–º–º—É –∑–∞–ø—É—â–µ–Ω–Ω–æ–π
        while True:
            await asyncio.sleep(60)
            
    except KeyboardInterrupt:
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    asyncio.run(main())
