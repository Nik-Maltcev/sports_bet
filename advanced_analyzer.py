import asyncio
import aiohttp
import json
from typing import List, Dict, Optional
from datetime import datetime
import pytz
import random

class SportsDataProvider:
    """–ö–ª–∞—Å—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∞–ª—å–Ω—ã—Ö —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    
    def __init__(self):
        self.session = None
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å API –∫–ª—é—á–∏ –¥–ª—è —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        self.api_endpoints = {
            "football": "https://api.football-data.org/v4/matches",
            "basketball": "https://api-basketball.p.rapidapi.com/games", 
            "tennis": "https://tennis-live-data.p.rapidapi.com/matches-today"
        }
    
    async def get_session(self):
        """–ü–æ–ª—É—á–∞–µ—Ç aiohttp —Å–µ—Å—Å–∏—é"""
        if not self.session:
            self.session = aiohttp.ClientSession()
        return self.session
    
    async def close_session(self):
        """–ó–∞–∫—Ä—ã–≤–∞–µ—Ç aiohttp —Å–µ—Å—Å–∏—é"""
        if self.session:
            await self.session.close()
    
    async def get_todays_matches(self, sport: str) -> List[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç –º–∞—Ç—á–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ –≤–∏–¥–∞ —Å–ø–æ—Ä—Ç–∞"""
        # –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –±—ã–ª–∏ –±—ã –∑–∞–ø—Ä–æ—Å—ã –∫ –≤–Ω–µ—à–Ω–∏–º API
        # –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –º–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        
        mock_matches = {
            "football": [
                {
                    "home_team": "–ú–∞–Ω—á–µ—Å—Ç–µ—Ä –°–∏—Ç–∏",
                    "away_team": "–õ–∏–≤–µ—Ä–ø—É–ª—å", 
                    "league": "–ü—Ä–µ–º—å–µ—Ä-–ª–∏–≥–∞",
                    "time": "20:00",
                    "odds": {"home": 2.1, "draw": 3.2, "away": 3.8}
                },
                {
                    "home_team": "–ë–∞—Ä—Å–µ–ª–æ–Ω–∞",
                    "away_team": "–†–µ–∞–ª –ú–∞–¥—Ä–∏–¥",
                    "league": "–õ–∞ –õ–∏–≥–∞", 
                    "time": "22:00",
                    "odds": {"home": 2.5, "draw": 3.1, "away": 2.9}
                }
            ],
            "basketball": [
                {
                    "home_team": "–õ–µ–π–∫–µ—Ä—Å",
                    "away_team": "–£–æ—Ä—Ä–∏–æ—Ä–∑",
                    "league": "–ù–ë–ê",
                    "time": "04:00",
                    "odds": {"home": 1.9, "away": 1.8, "total_over": 2.0}
                }
            ],
            "tennis": [
                {
                    "player1": "–ù–æ–≤–∞–∫ –î–∂–æ–∫–æ–≤–∏—á",
                    "player2": "–†–∞—Ñ–∞—ç–ª—å –ù–∞–¥–∞–ª—å",
                    "tournament": "ATP Masters",
                    "time": "16:00",
                    "odds": {"player1": 1.6, "player2": 2.3}
                }
            ]
        }
        
        return mock_matches.get(sport, [])
    
    async def get_team_stats(self, team: str) -> Dict:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–æ–º–∞–Ω–¥—ã"""
        # –ú–æ–∫–æ–≤—ã–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
        return {
            "recent_form": random.choice(["WWWWW", "WWLWW", "WLWWL", "LWWWW"]),
            "goals_scored_avg": round(random.uniform(1.2, 3.5), 1),
            "goals_conceded_avg": round(random.uniform(0.8, 2.2), 1),
            "home_advantage": random.randint(60, 85),
            "injury_count": random.randint(0, 3)
        }
    
    async def get_weather_data(self, city: str) -> Dict:
        """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ"""
        return {
            "temperature": random.randint(15, 25),
            "conditions": random.choice(["–°–æ–ª–Ω–µ—á–Ω–æ", "–û–±–ª–∞—á–Ω–æ", "–î–æ–∂–¥—å", "–í–µ—Ç—Ä–µ–Ω–æ"]),
            "wind_speed": random.randint(5, 20)
        }

class AdvancedSportsAnalyzer:
    """–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –∫–ª–∞—Å—Å –∞–Ω–∞–ª–∏–∑–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    
    def __init__(self):
        self.data_provider = SportsDataProvider()
        self.analysis_weights = {
            "recent_form": 0.25,
            "head_to_head": 0.20,
            "home_advantage": 0.15,
            "injuries": 0.15,
            "motivation": 0.15,
            "weather": 0.10
        }
    
    async def analyze_football_match(self, match_data: Dict) -> Dict:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ñ—É—Ç–±–æ–ª—å–Ω—ã–π –º–∞—Ç—á"""
        home_stats = await self.data_provider.get_team_stats(match_data["home_team"])
        away_stats = await self.data_provider.get_team_stats(match_data["away_team"])
        
        # –ê–Ω–∞–ª–∏–∑ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤
        analysis_factors = []
        confidence_score = 50
        
        # –ê–Ω–∞–ª–∏–∑ —Ñ–æ—Ä–º—ã –∫–æ–º–∞–Ω–¥
        if home_stats["recent_form"].count('W') > away_stats["recent_form"].count('W'):
            analysis_factors.append(f"{match_data['home_team']} –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –ª—É—á—à—É—é —Ç–µ–∫—É—â—É—é —Ñ–æ—Ä–º—É")
            confidence_score += 15
        elif away_stats["recent_form"].count('W') > home_stats["recent_form"].count('W'):
            analysis_factors.append(f"{match_data['away_team']} –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã")
            confidence_score += 10
        
        # –ê–Ω–∞–ª–∏–∑ –∞—Ç–∞–∫–∏ –∏ –∑–∞—â–∏—Ç—ã
        if home_stats["goals_scored_avg"] > away_stats["goals_conceded_avg"]:
            analysis_factors.append("–ê—Ç–∞–∫–∞ —Ö–æ–∑—è–µ–≤ –ø—Ä–æ—Ç–∏–≤ —Å–ª–∞–±–æ–π –∑–∞—â–∏—Ç—ã –≥–æ—Å—Ç–µ–π")
            confidence_score += 12
        
        # –î–æ–º–∞—à–Ω–µ–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ
        if home_stats["home_advantage"] > 75:
            analysis_factors.append("–ó–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ –¥–æ–º–∞—à–Ω–∏—Ö —Å—Ç–µ–Ω")
            confidence_score += 8
        
        # –¢—Ä–∞–≤–º—ã
        if away_stats["injury_count"] > home_stats["injury_count"]:
            analysis_factors.append("–ö–∞–¥—Ä–æ–≤—ã–µ –ø—Ä–æ–±–ª–µ–º—ã —É –≥–æ—Å—Ç–µ–≤–æ–π –∫–æ–º–∞–Ω–¥—ã")
            confidence_score += 10
        
        return {
            "confidence": min(confidence_score, 95),
            "key_factors": analysis_factors[:4],
            "detailed_analysis": self._generate_detailed_analysis(match_data, home_stats, away_stats)
        }
    
    def _generate_detailed_analysis(self, match_data: Dict, home_stats: Dict, away_stats: Dict) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –º–∞—Ç—á–∞"""
        analyses = [
            f"–°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ –∫–æ–º–∞–Ω–¥—ã —Å –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–º {home_stats['goals_scored_avg']} –≥–æ–ª–æ–≤ –∑–∞ –º–∞—Ç—á –≤ –∞—Ç–∞–∫–µ.",
            f"–§–æ—Ä–º–∞ –∫–æ–º–∞–Ω–¥ ({home_stats['recent_form']} vs {away_stats['recent_form']}) —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –≤–µ—Ä–æ—è—Ç–Ω—ã–π –∏—Å—Ö–æ–¥.",
            f"–¢–∞–∫—Ç–∏—á–µ—Å–∫–∏–π —Ä–∞—Å–∫–ª–∞–¥ —Å —É—á–µ—Ç–æ–º –¥–æ–º–∞—à–Ω–µ–≥–æ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ {home_stats['home_advantage']}% –≥–æ–≤–æ—Ä–∏—Ç –≤ –ø–æ–ª—å–∑—É –¥–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–∞.",
            f"–ê–Ω–∞–ª–∏–∑ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –≤—Å—Ç—Ä–µ—á –∏ –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –≤—ã—Å–æ–∫—É—é –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Å–æ–±—ã—Ç–∏—è."
        ]
        return random.choice(analyses)
    
    async def generate_enhanced_prediction(self, sport: str) -> Optional[Dict]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–ª—É—á—à–µ–Ω–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        try:
            matches = await self.data_provider.get_todays_matches(sport)
            if not matches:
                return None
            
            match = random.choice(matches)
            
            if sport == "football":
                analysis = await self.analyze_football_match(match)
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å—Ç–∞–≤–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞
                bet_types = ["–ü–æ–±–µ–¥–∞ —Ö–æ–∑—è–µ–≤", "–¢–æ—Ç–∞–ª –±–æ–ª—å—à–µ 2.5", "–û–±–µ –∑–∞–±—å—é—Ç"]
                prediction_type = random.choice(bet_types)
                
                return {
                    "sport": "–§—É—Ç–±–æ–ª",
                    "league": match["league"],
                    "match": f"{match['home_team']} - {match['away_team']}",
                    "time": match["time"],
                    "prediction": prediction_type,
                    "odds": str(random.choice([1.85, 2.10, 2.35, 2.60])),
                    "confidence": analysis["confidence"],
                    "analysis": analysis["detailed_analysis"],
                    "key_factors": analysis["key_factors"]
                }
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–∞: {e}")
            return None
    
    async def close(self):
        """–ó–∞–∫—Ä—ã–≤–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
        await self.data_provider.close_session()

# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞
async def demo_enhanced_analyzer():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞"""
    analyzer = AdvancedSportsAnalyzer()
    
    try:
        prediction = await analyzer.generate_enhanced_prediction("football")
        if prediction:
            print("üîç –£–ª—É—á—à–µ–Ω–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑:")
            print(f"‚öΩ {prediction['match']}")
            print(f"üìà {prediction['prediction']} (–∫–æ—ç—Ñ. {prediction['odds']})")
            print(f"üéØ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {prediction['confidence']}%")
            print(f"üìä –ê–Ω–∞–ª–∏–∑: {prediction['analysis']}")
            print("üîë –ö–ª—é—á–µ–≤—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã:")
            for factor in prediction['key_factors']:
                print(f"  ‚Ä¢ {factor}")
    
    finally:
        await analyzer.close()

if __name__ == "__main__":
    asyncio.run(demo_enhanced_analyzer())
