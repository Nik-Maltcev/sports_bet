import asyncio
import os
import sys
import config
from perplexity_analyzer import EnhancedSportsAnalyzer

async def test_perplexity():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å Perplexity API"""
    print("üî¨ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Perplexity API –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏...")
    print("=" * 50)
    
    perplexity_key = os.getenv('PERPLEXITY_API_KEY')
    
    if not perplexity_key:
        print("‚ùå PERPLEXITY_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        print("–î–æ–±–∞–≤—å—Ç–µ –∫–ª—é—á –≤ —Ñ–∞–π–ª .env:")
        print("PERPLEXITY_API_KEY=pplx-–≤–∞—à-–∫–ª—é—á")
        print("\n–ü–æ–ª—É—á–∏—Ç—å –∫–ª—é—á –º–æ–∂–Ω–æ –Ω–∞: https://perplexity.ai/account/api")
        return False
    
    print(f"üîë API –∫–ª—é—á –Ω–∞–π–¥–µ–Ω: {perplexity_key[:10]}...")
    
    try:
        analyzer = EnhancedSportsAnalyzer(perplexity_key)
        
        print("\nüèà –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ—É—Ç–±–æ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
        football_prediction = await analyzer.generate_real_prediction("football")
        
        if football_prediction:
            print("‚úÖ –§—É—Ç–±–æ–ª—å–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–ª—É—á–µ–Ω!")
            print(f"‚öΩ –ú–∞—Ç—á: {football_prediction['match']}")
            print(f"üèÜ –õ–∏–≥–∞: {football_prediction['league']}")
            print(f"üìà –ü—Ä–æ–≥–Ω–æ–∑: {football_prediction['prediction']}")
            print(f"üí∞ –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç: {football_prediction['odds']}")
            print(f"üéØ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {football_prediction['confidence']}%")
            print(f"üìä –ò—Å—Ç–æ—á–Ω–∏–∫: {football_prediction['source']}")
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ñ—É—Ç–±–æ–ª—å–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑")
        
        print("\nüèÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞—Å–∫–µ—Ç–±–æ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
        basketball_prediction = await analyzer.generate_real_prediction("basketball")
        
        if basketball_prediction:
            print("‚úÖ –ë–∞—Å–∫–µ—Ç–±–æ–ª—å–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–ª—É—á–µ–Ω!")
            print(f"üèÄ –ú–∞—Ç—á: {basketball_prediction['match']}")
            print(f"üèÜ –õ–∏–≥–∞: {basketball_prediction['league']}")
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –±–∞—Å–∫–µ—Ç–±–æ–ª—å–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑")
        
        await analyzer.close()
        
        print("\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
        print("üöÄ Perplexity API —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        return True
        
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        print("\n–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
        print("1. –ù–µ–≤–µ—Ä–Ω—ã–π API –∫–ª—é—á")
        print("2. –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤")
        print("3. –ü—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É")
        print("4. –ü—Ä–æ–±–ª–µ–º—ã —Å Perplexity API")
        return False

async def test_full_bot_integration():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–ª–Ω—É—é –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é –±–æ—Ç–∞ —Å Perplexity"""
    print("\nü§ñ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –±–æ—Ç–∞...")
    print("=" * 50)
    
    from main_bot import HybridSportsBot
    
    BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
    CHANNEL_ID = os.getenv('TELEGRAM_CHANNEL_ID') 
    PERPLEXITY_KEY = os.getenv('PERPLEXITY_API_KEY')
    
    if not all([BOT_TOKEN, CHANNEL_ID]):
        print("‚ùå –ù–µ –≤—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
        print("–ù–µ–æ–±—Ö–æ–¥–∏–º—ã: TELEGRAM_BOT_TOKEN, TELEGRAM_CHANNEL_ID")
        return False
    
    try:
        bot = HybridSportsBot(BOT_TOKEN, CHANNEL_ID, PERPLEXITY_KEY)
        
        print("üìä –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ —Å Perplexity...")
        predictions = await bot.generate_hybrid_predictions(2)
        
        print(f"‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(predictions)} –ø—Ä–æ–≥–Ω–æ–∑–æ–≤")
        
        for i, pred in enumerate(predictions, 1):
            print(f"\nüèÜ –ü—Ä–æ–≥–Ω–æ–∑ #{i}:")
            print(f"   –°–ø–æ—Ä—Ç: {pred.sport}")
            print(f"   –ú–∞—Ç—á: {pred.match}")
            print(f"   –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {pred.confidence}%")
        
        await bot.cleanup()
        
        print("\n‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç!")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏: {e}")
        return False

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üß™ –ö–û–ú–ü–õ–ï–ö–°–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï SPORTS PREDICTION BOT")
    print("=" * 60)
    
    # –¢–µ—Å—Ç 1: Perplexity API
    perplexity_ok = await test_perplexity()
    
    if perplexity_ok:
        # –¢–µ—Å—Ç 2: –ü–æ–ª–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è
        integration_ok = await test_full_bot_integration()
        
        if integration_ok:
            print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
            print("üöÄ –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—é –Ω–∞ Railway")
        else:
            print("\n‚ö†Ô∏è –ß–∞—Å—Ç–∏—á–Ω—ã–π —É—Å–ø–µ—Ö - Perplexity —Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω–æ –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π")
    else:
        print("\n‚ùå –¢–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã")
        print("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞")

if __name__ == "__main__":
    asyncio.run(main())
